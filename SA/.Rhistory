model.units
models.units
units = models.units
result <- NULL
units
Transactions
withmodel <- inner_join(Transactions, units )
withmodel
for (k in 0:2){
applymodel <- withmodel %>%
filter (model == k )
if ( nrow(applymodel) >= 1 ){
applymodel <- Model(transaction = applymodel, model.decades = decades , model.units = k)
result <- rbind(result,applymodel)
}
}
result
source('~/GitHub/SA/Algo1_Functions.R', encoding = 'UTF-8')
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
result.model.decade.1
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
source('~/GitHub/SA/Algo.R')
####################
# Alog
####################
# Run Algo1_TimeSpace
# Get all Trx not in result.TS
# Run Algo2_ZoneWindow over these Trx
#
# Input:
#   Args (from Parameter/Param_common.csv :
#     filename.Input:
#			limit.Algo1.noPsg
#     limit.Algo2.GridPer
#     limit.Algo2.ActiveDay
#     day.start
#     day.end
#   Input:
#     transaction history: Input/filename.Input
# Output:
#   result of model Time Space:
#			without filtrage & with noPsg: Output/Algo1_ + (Input) + V + (time).log
#			with filtrage & without noPsg: Output/Algo1_ + (Input) + V + (time).csv
#   result of model Zone Window:
#     reference Zone-Grid: Output/Algo2_ + (Input) + V + (time) + Zone.csv
#     without filtrage & with noPsg: Output/Algo2_ + (Input) + V + (time) + Window.log
#     with filtrage & without noPsg for day:   Output/Algo2_ + (Input) + V + (time) + Day.csv
#     															for night: Output/Algo2_ + (Input) + V + (time) + Night.csv
####################
##########
### Step 0.1: General Prepare
##########
# load package
.libPaths("RPackages")
library(dplyr)
library(cluster)
# define repository to get Parameters
ParamRepo <- NA
# define input filename to get History of transactions
filename.Input <- NA
Args <- commandArgs(trailingOnly = TRUE)
# get these two parameters from script
if(length(Args) > 1){
filename.Input <- Args[1]
ParamRepo <- Args[2]
} else if (length(grep(".csv",Args[1])) > 0){
filename.Input <- Args[1]
} else{
filename.Input <- "1675.csv"
ParamRepo <- Args[1]
}
# get the other parameters from the specified repository
if(is.na(ParamRepo)){
# get arguments
# args <- read.table("Parameters/Param_common.csv",sep = ";", header=TRUE)
args <- read.table("Param_App/Param_common.csv",sep = ";", header=TRUE)
} else {
# get arguments
args <- read.table(paste0(ParamRepo,"/Param_common.csv"),sep = ";", header=TRUE)
}
# limit args: under which the OD or Zone are considered unimportant
limit.Algo1.noPsg <- args$limit.Algo1.noPsg[1]
limit.Algo2.GridPer <- args$limit.Algo2.GridPer[1]
limit.Algo2.ActiveDay <- args$limit.Algo2.ActiveDay[1]
limit.Algo2.Day <- args$limit.Algo2.Day[1]				# by default = 5
limit.Algo2.Night <- args$limit.Algo2.Night[1] 		# by default = 3
Algo2.DayStart <- args$Algo2.DayStart[1] 					# by default = 6
Algo2.DayEnd <- args$Algo2.DayEnd[1]              # by default = 22
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args$day.start[1]))
day.end <- as.Date(as.character(args$day.end[1]))
# filter input file: decide whether or not ID with less trx will be removed
filter <- args$filter[1]
logFile <- args$logFile[1]
rm(args)
rm(Args)
if(day.start >= day.end) stop("La date debut est apres la date fin!")
# get Reference data from Reference/
# get sens
sens = read.table("Reference/Ref_sens.csv",sep = ";", header=TRUE)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# load function
source('Algo1_Functions.R', encoding = 'UTF-8')
source('Algo2_Functions.R', encoding = 'UTF-8')
##########
### Step 0.2: Prepare input file
##########
#   create ID from Badge + Porteur
#   correct Date type
#   correct Sens
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
)
# construct segmentation for a summary of each client with TotalNoPsg, TotalNoActiveDay
segmentation <- trx %>% group_by(ID) %>%
summarize(TotalNoPsg= n(),
TotalNoActiveDay = n_distinct(Date),
TotalNoPsgPerActiveDay = TotalNoPsg / TotalNoActiveDay)
trx <- trx %>% filter(Date > day.start & Date <= day.end)
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
if (nrow(trx) == 0) {
print(paste0("Aucun trajets sur la periode du ", day.start, " au ", day.end, " !"))
result.TS <- data.frame(
ID = character(),
OD = character(),
DOW = integer(),
Tmin = double(),
Tmax = double(),
noPsg = double()
)
result.TS.before <- result.TS
result.ZW.Zone <- data.frame(
ID = character(),
Zone = double(),
Grid = character()
)
result.ZW.Day <- data.frame(
ID = character(),
Zone = double()
)
result.ZW.Night <- result.ZW.Day
result.ZW.Frequency <- data.frame(
ID = character(),
Zone = double(),
Day = integer(),
Night = integer()
)
segmentation <- data.frame(
ID = character(),
TotalNoPsg = integer(),
TotalNoActiveDay = integer(),
TotalNoPsgPerActiveDay = double(),
NoPsgInPeriod = double(),
NoActiveDayInPeriod = double(),
NoPsgPerActiveDayInPeriod = double(),
NoOD10 = double(),
Algo1_NoOD = integer(),
Algo2_NoZone = integer()
)
} else {
# add NoPsgInPeriod, NoActiveDayInPeriod to segmentation
t <- trx %>% group_by(ID) %>%
summarise(NoPsgInPeriod = n(),
NoActiveDayInPeriod = n_distinct(Date),
NoPsgPerActiveDayInPeriod = NoPsgInPeriod / NoActiveDayInPeriod)
segmentation <- left_join(segmentation, t)
# add NoOD10 to segmentation
t <- trx %>% group_by(ID, Entr, Sor, Sens) %>% summarise(noPsg = n())
# TODO: replace 10 with parameter modifiable or proportional to Period
t1 <- t %>% filter(noPsg >= 10) %>% group_by(ID) %>% summarise(NoOD10 = n())
segmentation <- left_join(segmentation, t1)
rm(t,t1)
# filter
if(filter == TRUE) source('Algo1_DataPreparation.R', encoding = 'UTF-8')
if(nrow(trx) == 0) stop("Aucun trajet apres le filtrage, mettez le parametre filter = FALSE!")
# add sens & create OD
trx <- trx %>% mutate(Voie = ifelse(Entr == 0, Voie, 0))
trx <- trx %>% left_join(sens)
trx <- trx %>% mutate(SensEntr = ifelse(is.na(SensEntr), 0, SensEntr),
SensSor = ifelse(is.na(SensSor), 0, SensSor))
rm(sens)
trx <- trx %>% mutate(OD = paste0(Entr,"-",Sor,"-",SensEntr,"-",SensSor))
output <- trx
rm(trx)
if( (day.end - day.start) <= 30 ) stop("La periode est trop courte!")
# prepare period
train.period <- data.frame(Date = seq(day.start, day.end - 30, "day"))
train.period$DOW <- as.POSIXlt(train.period$Date)$wday
test.period <- data.frame(Date = seq(day.end - 30, day.end, "day"))
test.period$DOW <- as.POSIXlt(test.period$Date)$wday
# divide the hisory into: train & test
train <- output %>% filter(Date < day.end - 30)
test <- output %>% filter(Date >= day.end - 30)
ID.list <- output %>% group_by(ID) %>% summarise()
##########
t <- trx %>% group_by(ID) %>%
summarise(NoPsgInPeriod = n(),
NoActiveDayInPeriod = n_distinct(Date),
NoPsgPerActiveDayInPeriod = NoPsgInPeriod / NoActiveDayInPeriod)
segmentation <- left_join(segmentation, t)
# add NoOD10 to segmentation
t <- trx %>% group_by(ID, Entr, Sor, Sens) %>% summarise(noPsg = n())
# TODO: replace 10 with parameter modifiable or proportional to Period
t1 <- t %>% filter(noPsg >= 10) %>% group_by(ID) %>% summarise(NoOD10 = n())
segmentation <- left_join(segmentation, t1)
rm(t,t1)
# filter
if(filter == TRUE) source('Algo1_DataPreparation.R', encoding = 'UTF-8')
if(nrow(trx) == 0) stop("Aucun trajet apres le filtrage, mettez le parametre filter = FALSE!")
# add sens & create OD
trx <- trx %>% mutate(Voie = ifelse(Entr == 0, Voie, 0))
trx <- trx %>% left_join(sens)
trx <- trx %>% mutate(SensEntr = ifelse(is.na(SensEntr), 0, SensEntr),
SensSor = ifelse(is.na(SensSor), 0, SensSor))
rm(sens)
trx <- trx %>% mutate(OD = paste0(Entr,"-",Sor,"-",SensEntr,"-",SensSor))
output <- trx
rm(trx)
if( (day.end - day.start) <= 30 ) stop("La periode est trop courte!")
# prepare period
train.period <- data.frame(Date = seq(day.start, day.end - 30, "day"))
train.period$DOW <- as.POSIXlt(train.period$Date)$wday
test.period <- data.frame(Date = seq(day.end - 30, day.end, "day"))
test.period$DOW <- as.POSIXlt(test.period$Date)$wday
# divide the hisory into: train & test
train <- output %>% filter(Date < day.end - 30)
test <- output %>% filter(Date >= day.end - 30)
ID.list <- output %>% group_by(ID) %>% summarise()
##########
### Step 1: train & evaluate model
##########
# find first digit for Model
models.units <- getModel.units( output )
result.model.decade.0 <- Model.for.a.decade(train,0,models.units)
### evalutaion model.00
test.model.0 <- GetResult(test, result.model.decade.0)
if(nrow(test.model.0) > 0) test.model.0$ModelDecade <- 0
ind.model.0 <- GetInd(test.model.0, result.model.decade.0)
if(nrow(ind.model.0) > 0)  ind.model.0$ModelDecade <- 0
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
# Model 2 (decades) OD -> Space -> Time
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
### evalutaion model.02
test.model.2 <- GetResult(test, result.model.decade.2)
if(nrow(test.model.2) > 0) test.model.2$ModelDecade <- 2
ind.model.2 <- GetInd(test.model.2, result.model.decade.2)
if(nrow(ind.model.2) > 0)  ind.model.2$ModelDecade <- 2
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
str(result.model.decade.2)
Transactions
decades
decades = 2
withmodel <- inner_join(Transactions, units )
for (k in 0:2){
applymodel <- withmodel %>%
filter (model == k )
if ( nrow(applymodel) >= 1 ){
applymodel <- Model(transaction = applymodel, model.decades = decades , model.units = k)
result <- rbind(result,applymodel)
}
}
result
units
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
str(result.model.decade.2)
Transactions = train
result <- NULL
withmodel <- inner_join(Transactions, units )
for (k in 0:2){
applymodel <- withmodel %>%
filter (model == k )
if ( nrow(applymodel) >= 1 ){
applymodel <- Model(transaction = applymodel, model.decades = decades , model.units = k)
result <- rbind(result,applymodel)
}
}
result
applymodel
withmodel
model
withmodel
withmodel %>% count(model)
withmodel %>% filter(model==2)
applymodel
k = 2
applymodel <- withmodel %>%
filter (model == k )
applymodel
applymodel <- Model(transaction = applymodel, model.decades = decades , model.units = k)
applymodel
decades
model.units
k
Model(transaction = applymodel, model.decades = decades , model.units = k)
Model(transaction = applymodel, model.decades = decades , model.units = k)
applymodel
source('~/GitHub/SA/Algo1_Functions.R', encoding = 'UTF-8')
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
### evalutaion model.02
test.model.2 <- GetResult(test, result.model.decade.2)
if(nrow(test.model.2) > 0) test.model.2$ModelDecade <- 2
ind.model.2 <- GetInd(test.model.2, result.model.decade.2)
if(nrow(ind.model.2) > 0)  ind.model.2$ModelDecade <- 2
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
result.model.decade.2
Transactions
Transactions == train
sum(Transactions != train)
decades
units
result <- NULL
withmodel <- inner_join(Transactions, units )
withmodel
k
applymodel <- withmodel %>%
filter (model == k )
applymodel
applymodel <- Model(transaction = applymodel, model.decades = decades , model.units = k)
transaction
Model(transaction = applymodel, model.decades = decades , model.units = k)
applymodel <- Model(transaction = applymodel, model.decades = decades , model.units = k)
applymodel <- withmodel %>%
filter (model == k )
applymodel
Model(transaction = applymodel, model.decades = decades , model.units = k)
k
decades
Model(applymodel, 2,2)
Transactions = applymodel
transactions = applymodel
transaction = applymodel
Compteur <- transaction %>%
group_by(ID, Entr,Sor) %>%
summarise( n = n())
#DECISION AUTOMATIQUE DES TRONCONS FREQUENTS
Troncon_Selection <- Compteur %>%
group_by(ID) %>%
filter (n > (param.model.2 * max(n)))
VIP2_espace <- inner_join(transaction, Troncon_Selection, by = c("ID","Entr","Sor"))
VIP2_espace <- tbl_df(VIP2_espace)
#Create OD.list for the kmeans
OD.list <- VIP2_espace %>% group_by( ID,Entr,Sor, Sens) %>% summarise()
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer())
result
str(result)
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer())
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer()) %>% result
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer()) %>% mutate(OD = as.character(OD))
data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer()) %>% mutate(OD = as.character(OD))
data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer()) %>% tbl_df %>% mutate(OD = as.character(OD))
result
tbl_df(result) %>%
mutate(DOW = as.integer(DOW),
OD = as.character(OD)) %>%
select(ID, OD, DOW, Tmin, Tmax, Model, noPsg)
}
tbl_df(result) %>%
mutate(DOW = as.integer(DOW),
OD = as.character(OD)) %>%
select(ID, OD, DOW, Tmin, Tmax, Model, noPsg)
result
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer())
result$ID <- as.character(result$ID)
for (k in 1:nrow(OD.list)){
for (j in 0:6){
temp <- VIP2_espace %>% filter(ID == OD.list$ID[k] & DOW == j &  Entr == OD.list$Entr[k] & Sor == OD.list$Sor[k] )
max.cluster <- length(unique(temp$TimeSor))
if(nrow(temp) >= param.min.nb.for.cluster & max.cluster > param.min.uniqueTimeSor) {
# if not many passages, we will not cluster
# decide nb of cluster
clus<- clusGap(temp %>% select(TimeSor), kmeans, max(min(param.max.nb.cluster, max.cluster),2))
n.cluster <- with(clus,maxSE(Tab[,"gap"],Tab[,"SE.sim"]))
set.seed(1234)
temp.kmeans <-   kmeans(temp[, "TimeSor"], centers = n.cluster)
temp$cluster <- temp.kmeans$cluster
T <- temp %>%
group_by(ID, OD, DOW, cluster) %>%
summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, noPsg = n())
T <- T %>% filter(noPsg>1)
T$cluster <- NULL
result <- rbind(result, T)
} # end of if
} # end of j loop
} # end of k loop
result
VIP2_espace$weekday <- 0
VIP2_espace[VIP2_espace$DOW %in% c(1:5), ]$weekday <- 1
# result <- data.frame(ID="", Entr=0, Sor=0, SensEntr = 0, SensSor = 0, Sens = 0, DOW=0, SD=0, T=0, Tmin=0, Tmax=0, noPsg=0)
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer())
result$ID <- as.character(result$ID)
for (k in 1:nrow(OD.list)){
for (j in 0:1){
temp <- VIP2_espace %>% filter(ID == OD.list$ID[k] &  Entr == OD.list$Entr[k] & Sor == OD.list$Sor[k] & weekday == j)
max.cluster <- length(unique(temp$TimeSor))
if(nrow(temp) >= param.min.nb.for.cluster & max.cluster > param.min.uniqueTimeSor) {
# if not many passages, we will not cluster
#	decide nb of cluster
clus<- clusGap(temp %>% select(TimeSor), kmeans, max(min(param.max.nb.cluster, max.cluster),2))
n.cluster <- with(clus,maxSE(Tab[,"gap"],Tab[,"SE.sim"]))
set.seed(1234)
temp.kmeans <-   kmeans(temp[, "TimeSor"], centers = n.cluster)
temp$cluster <- temp.kmeans$cluster
T <- temp %>%
group_by(ID, OD, DOW, cluster) %>%
summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, noPsg = n())
T <- T %>% filter(noPsg>1)
T$cluster <- NULL
result <- rbind(result, T)
} # end of if
} # end of j loop
} # end of k loop
result <- result[-1,]
if(nrow(result)>0)  result$Model <- model
result <- data.frame(ID=character(), OD=character(), DOW = integer(), SD=double(), T=double(), Tmin=double(), Tmax=double(), noPsg=integer())
result$ID <- as.character(result$ID)
for (k in 1:nrow(OD.list)){
for (j in 0:6){
temp <- VIP2_espace %>% filter(ID == OD.list$ID[k] & DOW == j &  Entr == OD.list$Entr[k] & Sor == OD.list$Sor[k] )
max.cluster <- length(unique(temp$TimeSor))
if(nrow(temp) >= param.min.nb.for.cluster & max.cluster > param.min.uniqueTimeSor) {
# if not many passages, we will not cluster
# decide nb of cluster
clus<- clusGap(temp %>% select(TimeSor), kmeans, max(min(param.max.nb.cluster, max.cluster),2))
n.cluster <- with(clus,maxSE(Tab[,"gap"],Tab[,"SE.sim"]))
set.seed(1234)
temp.kmeans <-   kmeans(temp[, "TimeSor"], centers = n.cluster)
temp$cluster <- temp.kmeans$cluster
T <- temp %>%
group_by(ID, OD, DOW, cluster) %>%
summarise(SD = sd(TimeSor), T = mean(TimeSor),Tmin = T -SD, Tmax = T + SD, noPsg = n())
T <- T %>% filter(noPsg>1)
T$cluster <- NULL
result <- rbind(result, T)
} # end of if
} # end of j loop
} # end of k loop
result <- result[-1,]
if(nrow(result) > 0)	result$Model <- model
result
tbl_df(result) %>%
mutate(DOW = as.integer(DOW),
OD = as.character(OD))
t <- result
t
t %>% mutate(Model )
t %>% mutate(Model = character())
t %>% mutate(Model = character()) %>% str
Model(transaction = applymodel, model.decades = decades , model.units = k)
Model.for.a.decade(train,1,models.units)
Model.for.a.decade(train,2,models.units)
source('~/GitHub/SA/Algo1_Functions.R', encoding = 'UTF-8')
Model.for.a.decade(train,2,models.units)
models.units <- getModel.units( output )
# Model 0 (decades) : BENCHMARK
result.model.decade.0 <- Model.for.a.decade(train,0,models.units)
### evalutaion model.00
test.model.0 <- GetResult(test, result.model.decade.0)
if(nrow(test.model.0) > 0) test.model.0$ModelDecade <- 0
ind.model.0 <- GetInd(test.model.0, result.model.decade.0)
if(nrow(ind.model.0) > 0)  ind.model.0$ModelDecade <- 0
# Model 1 (decades)	Time-Space
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
# Model 2 (decades) OD -> Space -> Time
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
### evalutaion model.02
test.model.2 <- GetResult(test, result.model.decade.2)
if(nrow(test.model.2) > 0) test.model.2$ModelDecade <- 2
ind.model.2 <- GetInd(test.model.2, result.model.decade.2)
if(nrow(ind.model.2) > 0)  ind.model.2$ModelDecade <- 2
Ind <- rbind(ind.model.0, ind.model.1, ind.model.2)
Ind <- inner_join ( Ind, models.units)
Ind.final <- Ind %>%
group_by(ID) %>%
summarise( Model = ModelDecade[Ind == max(Ind)][1]*10 + model[Ind == max(Ind)][1])
result <- rbind(result.model.decade.0, result.model.decade.1, result.model.decade.2)
search()
source('~/GitHub/SA/Algo.R')
# load package
.libPaths("RPackages")
library(dplyr)
library(cluster)
source('~/GitHub/SA/Algo.R')
rm(list = ls())
source('~/GitHub/SA/Algo.R')
source('~/GitHub/SA/Algo.R')

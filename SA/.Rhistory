input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# load function
source('Algo1_Functions.R', encoding = 'UTF-8')
source('Algo2_Functions.R', encoding = 'UTF-8')
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
)
# construct segmentation for a summary of each client with TotalNoPsg, TotalNoActiveDay
segmentation <- trx %>% group_by(ID) %>%
summarize(TotalNoPsg= n(),
TotalNoActiveDay = n_distinct(Date),
TotalNoPsgPerActiveDay = TotalNoPsg / TotalNoActiveDay)
trx <- trx %>% filter(Date > day.start & Date <= day.end)
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
trx
t <- trx %>% group_by(ID) %>%
summarise(NoPsgInPeriod = n(),
NoActiveDayInPeriod = n_distinct(Date),
NoPsgPerActiveDayInPeriod = NoPsgInPeriod / NoActiveDayInPeriod)
segmentation <- left_join(segmentation, t)
# add NoOD10 to segmentation
t <- trx %>% group_by(ID, Entr, Sor, Sens) %>% summarise(noPsg = n())
# TODO: replace 10 with parameter modifiable or proportional to Period
t1 <- t %>% filter(noPsg >= 10) %>% group_by(ID) %>% summarise(NoOD10 = n())
segmentation <- left_join(segmentation, t1)
rm(t,t1)
# filter
if(filter == TRUE) source('Algo1_DataPreparation.R', encoding = 'UTF-8')
if(nrow(trx) == 0) stop("Aucun trajet apres le filtrage, mettez le parametre filter = FALSE!")
# add sens & create OD
trx <- trx %>% mutate(Voie = ifelse(Entr == 0, Voie, 0))
trx <- trx %>% left_join(sens)
trx <- trx %>% mutate(SensEntr = ifelse(is.na(SensEntr), 0, SensEntr),
SensSor = ifelse(is.na(SensSor), 0, SensSor))
rm(sens)
trx <- trx %>% mutate(OD = paste0(Entr,"-",Sor,"-",SensEntr,"-",SensSor))
output <- trx
rm(trx)
if( (day.end - day.start) <= 30 ) stop("La periode est trop courte!")
# prepare period
train.period <- data.frame(Date = seq(day.start, day.end - 30, "day"))
train.period$DOW <- as.POSIXlt(train.period$Date)$wday
test.period <- data.frame(Date = seq(day.end - 30, day.end, "day"))
test.period$DOW <- as.POSIXlt(test.period$Date)$wday
# divide the hisory into: train & test
train <- output %>% filter(Date < day.end - 30)
test <- output %>% filter(Date >= day.end - 30)
ID.list <- output %>% group_by(ID) %>% summarise()
##########
### Step 1: train & evaluate model
##########
# find first digit for Model
models.units <- getModel.units( output )
# Model 0 (decades) : BENCHMARK
result.model.decade.0 <- Model.for.a.decade(train,0,models.units)
### evalutaion model.00
test.model.0 <- GetResult(test, result.model.decade.0)
if(nrow(test.model.0) > 0) test.model.0$ModelDecade <- 0
ind.model.0 <- GetInd(test.model.0, result.model.decade.0)
if(nrow(ind.model.0) > 0)  ind.model.0$ModelDecade <- 0
# Model 1 (decades)	Time-Space
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
# Model 2 (decades) OD -> Space -> Time
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
### evalutaion model.02
test.model.2 <- GetResult(test, result.model.decade.2)
if(nrow(test.model.2) > 0) test.model.2$ModelDecade <- 2
ind.model.2 <- GetInd(test.model.2, result.model.decade.2)
if(nrow(ind.model.2) > 0)  ind.model.2$ModelDecade <- 2
### compare model results
Ind <- rbind(ind.model.0, ind.model.1, ind.model.2)
Ind <- inner_join ( Ind, models.units)
Ind.final <- Ind %>%
group_by(ID) %>%
summarise( Model = ModelDecade[Ind == max(Ind)][1]*10 + model[Ind == max(Ind)][1])
result <- rbind(result.model.decade.0, result.model.decade.1, result.model.decade.2)
rm(result.model.decade.0, test.model.0, ind.model.0,
result.model.decade.1, test.model.1, ind.model.1,
result.model.decade.2, test.model.2, ind.model.2)
result.TS.before <- inner_join(result, Ind.final) %>%
arrange (ID, desc(noPsg), Tmin) %>%
select(-Model) %>%
mutate(ID = as.character(as.numeric(ID))) %>%
distinct
result.TS <- result.TS.before %>% filter(noPsg > limit.Algo1.noPsg)
rm(Ind, Ind.final, models.units)
rm(ID.list,
test,train,
test.period,train.period)
print("Positiont Start")
# add Algo1_NoOD (number of OD in result.TS) to segmentation
t <- result.TS %>% group_by(ID) %>% summarise(Algo1_NoOD = n_distinct(OD))
segmentation <- left_join(segmentation, t)
##########
### Step 2: Prepare for Algo2 - Get Trx not in Result.TS
##########
t <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start & Date <= day.end)
# find trx in result.TS
if(nrow(result.TS) > 0){
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1 <- cbind(result.TS,t2) %>% tbl_df
t3 <- inner_join(t,t1)
t4 <- t3 %>% filter(TimeSor <= Tmax & TimeSor >= Tmin)
t5 <- t4 %>% select(Ste: Sens) %>% distinct
t5$TS <- TRUE
trx <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
rm(t1,t2,t3,t4,t5)
} else {trx <- t}
# get Reference data from Reference/
# run Algo2_makeGrid to have "Ref_ODtoGrid.csv" and "Ref_GridLimit.csv"
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Grid = as.character(Grid))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Grid = as.character(Grid))
print("Positiont 3")
trx
trxGrid <- trx %>% inner_join(ODtoGrid)
t1 <- trxGrid %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Grid
t2 <- trxGrid %>%
group_by(ID, Grid) %>%
summarise(Day = n_distinct(Date))
t1
t2
trxGridActive <- inner_join(t1,t2)
if(nrow(trxGridActive) > 0) {
trxGridActive <- trxGridActive %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.Algo2.ActiveDay,
Per >= limit.Algo2.GridPer)
} else trxGridActive <- trxGridActive %>% mutate(Per = 0)
trxGridActive
trxGridActive %>% count(ActiveDay)
trxGridActive %>% count(ActiveDay, Day)
trxGridActive %>%
mutate(Per = Day / ActiveDay)
limit.Algo2.ActiveDay
limit.Algo2.GridPer
source('~/GitHub/SA/Algo.R')
result.TS
segmentation
segmentation %>% count(Algo1_NoOD, Algo2_NoZone)
source('~/GitHub/SA/Algo.R')
result.ZW.Zone
segmentation
segmentation%>% count(Algo2_NoZone)
segmentation%>% count(Algo1_NoOD,Algo2_NoZone)
segmentation%>% count(Algo1_NoOD > 0,Algo2_NoZone)
result.ZW.Frequency
result.ZW.Frequency %>% count(Day)
result.ZW.Frequency %>% count(Night)
library(ggplot2)
ggplot(result.ZW.Frequency) + geom_density(aes(Day, col = "Day")) + geom_density(aes(Night, col = "Night"))
ggplot(segmentation) %>% geom_bar(aes(Algo2_NoZone))
ggplot(segmentation) %>% geom_bar(aes(Algo2_noZone))
ggplot(segmentation) + geom_bar(aes(Algo2_noZone))
ggplot(segmentation) + geom_bar(aes(Algo2_NoZone))
segmentation%>% count(Algo2_NoZone)
nrow(result.ZW.Day)
nrow(result.ZW.Night)
nrow(result.ZW.Frequency)
result.ZW.Frequency
result.ZW.Frequency %>% filter(Day > 0) %>% ungroup %>% group_by(ID) %>% summarise(nZ = n())
result.ZW.Frequency %>% filter(Day > 0) %>% ungroup %>% group_by(ID) %>% summarise(nZ = n()) %>% count(nZ)
result.ZW.Frequency %>% filter(Night > 0) %>% ungroup %>% group_by(ID) %>% summarise(nZ = n()) %>% count(nZ)
result.ZW.Frequency %>% filter(Night > 0) %>% select(ID) %>% distinct
result.ZW.Frequency %>% filter(Day > 0) %>% select(ID) %>% distinct
result.ZW.Frequency %>% filter(Day > 0) %>% select(ID) %>% ungroup %>% distinct
result.ZW.Zone %>% select(ID) %>% distinct
segmentatoin
segmentation
segmentation %>% count(Algo2_NoZone)
segmentation %>% filter(Algo2_NoZone > 0)
segmentation
segmentation %>% filter(Algo1_NoOD > 0)
segmentation %>% count(Algo2_NoZone)
result.ZW.Day %>% select(ID) %>% distinct
result.ZW.Night %>% select(ID) %>% distinct
source('~/GitHub/SA/Algo2_makeGrid.R')
source('~/GitHub/SA/Algo.R')
result.ZW.Night %>% select(ID) %>% distinct
result.ZW.Day %>% select(ID) %>% distinct
segmentation %>% count(Algo2_NoZone)
segmentation %>% count(Algo1_NoOD)
segmentation %>% count(Algo1_NoOD > 0)
segmentation %>% count(Algo2_NoZone >0)
segmentation %>% count(Algo2_NoZone)
result.ZW.Night %>% select(ID) %>% distinct
result.ZW.Day %>% select(ID) %>% distinct
library(dplyr)
library(cluster)
library(ggplot2)
t <- read.table("Output/Algo_Summary_VIP_v20151210_V20160119_1145.csv",sep = ";", header=TRUE)
t
t <- read.table("Output/Algo_Summary_VIP_v20151210_V20160119_1145.csv",sep = ";", header=TRUE)  %>% tbl_df
t
count(t, NoOD10)
t
count(t, Algo1_NoOD)
count(t, Algo1_NoOD > 0)
count(t, Algo1_NoOD > 0, Algo2_NoZone > 0)
t
ggplot(t) + geom_bar(aes(NoPsgPerActiveDayInPeriod))
ggplot(t) + geom_bar(aes(Algo1_NoOD))
segmentation
segmentation %>% count(Algo1_NoOD > 0)
segmentation %>% count(Algo2_NoZone > 0)
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0)
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_density(aes(TotalNoPsg))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_bar(aes(TotalNoPsg))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_density(aes(TotalNoPsg)) + geom_density(TotalNoActiveDay)
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0)
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_density(aes(TotalNoPsg)) + geom_density(aes(TotalNoActiveDay))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_density(aes(TotalNoPsg)) + geom_density(aes(TotalNoActiveDay), col = "Day")
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_density(aes(TotalNoPsg)) + geom_density(aes(TotalNoActiveDay, col = "Day"))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_bar(aes(NoPsgPerActiveDayInPeriod))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_bar(aes(NoOD10))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_bar(aes(NoPsgInPeriod))
segmentation %>% filter(Algo2_NoZone == 0 & Algo1_NoOD == 0) %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + xlim(c(0,50))
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
source('~/GitHub/SA/Algo.R')
rm(list= ls())
# define repository to get Parameters
ParamRepo <- NA
# define input filename to get History of transactions
filename.Input <- NA
Args <- commandArgs(trailingOnly = TRUE)
# get these two parameters from script
if(length(Args) > 1){
filename.Input <- Args[1]
ParamRepo <- Args[2]
} else if (length(grep(".csv",Args[1])) > 0){
filename.Input <- Args[1]
} else{
filename.Input <- "App.csv"
ParamRepo <- Args[1]
}
# get the other parameters from the specified repository
if(is.na(ParamRepo)){
# get arguments
# args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
args <- read.table("Param_App/Param_Algo.csv",sep = ";", header=TRUE)
} else {
# get arguments
args <- read.table(paste0(ParamRepo,"/Param_Algo.csv"),sep = ";", header=TRUE)
}
# limit args: under which the OD or Zone are considered unimportant
limit.Algo1.noPsg <- args$limit.Algo1.noPsg[1]
limit.Algo2.GridPer <- args$limit.Algo2.GridPer[1]
limit.Algo2.ActiveDay <- args$limit.Algo2.ActiveDay[1]
limit.Algo2.Day <- args$limit.Algo2.Day[1]
limit.Algo2.Night <- args$limit.Algo2.Night[1]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args$day.start[1]))
day.end <- as.Date(as.character(args$day.end[1]))
# filter input file: decide whether or not ID with less trx will be removed
filter <- args$filter[1]
rm(args)
rm(Args)
rm(args)
rm(Args)
if(day.start >= day.end) stop("La date debut est apres la date fin!")
# get Reference data from Reference/
# get sens
sens = read.table("Reference/Ref_sens.csv",sep = ";", header=TRUE)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
inût
input
input %>% min(Date)
min(input$Date)
# load function
source('Algo1_Functions.R', encoding = 'UTF-8')
source('Algo2_Functions.R', encoding = 'UTF-8')
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
)
trx
min(trx$Date)
max(trx$Date)
ggplot(trx) + geom_bar(aes(Date))
day.start
Args <- commandArgs(trailingOnly = TRUE)
# get these two parameters from script
if(length(Args) > 1){
filename.Input <- Args[1]
ParamRepo <- Args[2]
} else if (length(grep(".csv",Args[1])) > 0){
filename.Input <- Args[1]
} else{
filename.Input <- "App.csv"
ParamRepo <- Args[1]
}
# get the other parameters from the specified repository
if(is.na(ParamRepo)){
# get arguments
# args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
args <- read.table("Param_App/Param_Algo.csv",sep = ";", header=TRUE)
} else {
# get arguments
args <- read.table(paste0(ParamRepo,"/Param_Algo.csv"),sep = ";", header=TRUE)
}
# limit args: under which the OD or Zone are considered unimportant
limit.Algo1.noPsg <- args$limit.Algo1.noPsg[1]
limit.Algo2.GridPer <- args$limit.Algo2.GridPer[1]
limit.Algo2.ActiveDay <- args$limit.Algo2.ActiveDay[1]
limit.Algo2.Day <- args$limit.Algo2.Day[1]
limit.Algo2.Night <- args$limit.Algo2.Night[1]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args$day.start[1]))
day.end <- as.Date(as.character(args$day.end[1]))
# filter input file: decide whether or not ID with less trx will be removed
filter <- args$filter[1]
rm(args)
rm(Args)
day.start
day.end
source('~/GitHub/SA/Algo.R')
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
trx %>% count(ID)
input %>% count(ID)
input
input %>% count(EVA)
input %>% count(EVA, Badge)
input %>% count(EVA, Badge, Porteur)
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
251/4401
(251+35)/4401
(1700)/4401
2415/4401
2415+35+1700+251
trx %>% count(ID)
segmentation
segmentation %>% count(NoPsgInPeriod > 0)
trx %>% count(ID)
115/4401
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
1700+251+35
1986/4401
1986 + 115
1986 + 115 -4401
2300/4401
result.ZW.Zone
GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
GridLimit
library(ggplot2)
library(dplyr)
library(cluster)
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
GridLimit
segmentation %>% count(Algo2_NoZone > 0, Algo1_NoOD >0)
segmentation %>% filter(Algo2_NoZone > 0 &  Algo1_NoOD >0)
t
t <- GridLimit %>% slice(1)
gridStep <- t$u - t$d
t
result.ZW.Zone
k <- segmentation %>% filter(Algo2_NoZone > 0 &  Algo1_NoOD >0)
k
k <- segmentation %>% filter(Algo2_NoZone == 0 &  Algo1_NoOD == 0)
k
ggplot(k) + geom_bar(aes(NoOD10))
trx
t1 <- trx %>% inner_join(k1)
k1 <- k %>% select(ID)
t1 <- trx %>% inner_join(k1)
t1
segmentation
k1 <- k %>% select(ID, NoOD10: Algo2_NoZone)
t1 <- trx %>% inner_join(k1)
t1
t1 %>% count(ID)
k1 %>% count(ID)
trx
input
trx %>% count(ID)
4401-4287
114/4401
k1
k
k %>% count(NoPsgInPeriod >0)
k %>% count(NoPsgInPeriod > 10)
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod)) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, col = (Algo2_NoZone > 0))) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, fill = (Algo2_NoZone > 0))) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, fill = (Algo2_NoZone == 0 &  Algo1_NoOD == 0))) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, fill = No10OD)) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, fill = NoOD10)) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, fill = as.factor(NoOD10))) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoOD10, fill = (Algo2_NoZone == 0 &  Algo1_NoOD == 0))) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoOD10, fill = (Algo2_NoZone == 0 &  Algo1_NoOD == 0))) + xlim(c(0,10))
ggplot(segmentation) + geom_bar(aes(NoPsgInPeriod, fill = as.factor(NoOD10))) + xlim(c(1,100))
k
ggplot(k) + geom_bar(aes(NoPsgInPeriod, fill = as.factor(NoOD10))) + xlim(c(1,100))
k %>% count(NoPsgInPeriod > 0)
k %>% count(NoOD10 > 0)
k %>% filter(NoOD10 == 0)
k %>% filter(NoOD10 == 0) %>% ggplot + geom_density(aes(NoPsgPerActiveDayInPeriod))
k %>% filter(NoOD10 == 0) %>% ggplot + geom_density(aes(NoActiveDayInPeriod))
k %>% filter(NoOD10 == 0) %>% ggplot + geom_bar(aes(NoActiveDayInPeriod))
k  %>% ggplot + geom_bar(aes(NoActiveDayInPeriod))
segmentation  %>% ggplot + geom_bar(aes(NoActiveDayInPeriod))
ggplot(segmentation) + geom_bar(aes(NoActiveDayInPeriod, fill = (Algo2_NoZone == 0 &  Algo1_NoOD == 0))) + xlim(c(1,100))
ggplot(segmentation) + geom_bar(aes(NoActiveDayInPeriod, fill = (Algo2_NoZone == 0 &  Algo1_NoOD == 0))) + xlim(c(0,20))
k
k %>% count(NoActiveDayInPeriod <= 5)
1760 / 4401
100-39-39-6.5
100-39-39-6.5-2.5
13%*4401
13% * 4401
0.13 * 4401
41.5+6.5+39
ggplot(segmentation) + geom_bar(aes(NoActiveDayInPeriod, fill = (Algo2_NoZone == 0 &  Algo1_NoOD == 0))) + xlim(c(0,20))
k1 <- k %>% filter(NoActiveDayInPeriod > 5)
k1
k
2415-665
2415-655
k1
k1 %>% ggplot + geom_bar(aes(NoPsgPerActiveDayInPeriod))
k1 %>% ggplot + geom_bar(aes(NoOD10))
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod))
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + geom_bar(aes(NoPsgTotal))
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + geom_bar(aes(TotlaNoPsg))
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + geom_bar(aes(TotalNoPsg))
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + geom_bar(aes(TotalNoPsg, fill = "Total")) + position_dodge()
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + geom_bar(aes(TotalNoPsg, fill = "Total")) + position_dodge()
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod)) + geom_bar(aes(TotalNoPsg, fill = "Total"))
k1 %>% ggplot + geom_bar(aes(NoPsgInPeriod/TotalNoPsg))
k1 %>% count(TotalNoPsg == NoPsgInPeriod)
trx %>% count(ID)
k1 %>% count(TotalNoPsg == NoPsgInPeriod)
k1
k1
k1 <- k %>% filter(NoActiveDayInPeriod > 5) %>% select(ID, NoOD10: Algo2_NoZone)
k1
t1 <- trx %>% inner_join(k1)
t1
k1
t1
t2 <- t1 %>% group_by(ID, NoOD10: Algo2_NoZone) %>% summarise(minDate = min(Date))
t2
count(t2)
ggplot(t2) + geom_bar(aes(minDate))
t1
t2 <- t1 %>% group_by(ID, TotalNoPsg,NoPsgInPeriod) %>% summarise(minDate = min(Date))
k1 <- k %>% filter(NoActiveDayInPeriod > 5) %>% select(ID, TotalNoPsg,NoPsgInPeriod ,NoOD10: Algo2_NoZone)
k1
t1 <- trx %>% inner_join(k1)
k1 %>% count(TotalNoPsg == NoPsgInPeriod)
t2 <- t1 %>% group_by(ID, TotalNoPsg,NoPsgInPeriod) %>% summarise(minDate = min(Date))
t2
ggplot(t2) + geom_bar(aes(minDate, fill = (TotalNoPsg == NoPsgInPeriod)))
t2
t2 %>% count(Total == NoPsgInPeriod)
t2 %>% count(TotalNoPsg == NoPsgInPeriod)
t2 %>% count(TotalNoPsg == NoPsgInPeriod, minDate >= as.Date("2015-7-7"))
655/4401
trx %>% count(ID)
segmentation
segmentation  %>% count(Algo1_NoOD > 0)
segmentation  %>% count(Algo2_NoZone > 0)
segmentation  %>% count(Algo1_NoOD >0 ,Algo2_NoZone > 0)
segmentation  %>% count(Algo1_NoOD ==0 & Algo2_NoZone ==  0)
segmentation  %>% filter (Algo1_NoOD ==0 & Algo2_NoZone ==  0) %>% count(NoPsgInPeriod < 5)
segmentation  %>% filter (Algo1_NoOD ==0 & Algo2_NoZone ==  0) %>% count(NoPsgInPeriod <= 5)
segmentation  %>% filter (Algo1_NoOD ==0 & Algo2_NoZone ==  0) %>% count(NoActiveDayInPeriod <= 5)
655+1760
286/4401
1700/4401
1760/4401
40+39+6.5
40+39+6.5-100
655/4401
t2 %>% count(TotalNoPsg == NoPsgInPeriod, minDate >= as.Date("2015-7-7"))
t2 %>% count(TotalNoPsg == NoPsgInPeriod)
t2 %>% count(TotalNoPsg == NoPsgInPeriod, minDate >= as.Date("2015-7-7"))
196/4401

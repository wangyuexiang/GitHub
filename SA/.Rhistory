write.table(temp,"Ref/Ref_VIPn.csv",sep=";",row.name=FALSE,quote=FALSE)
temp
write.table(temp,"Ref/Ref_VIPn.csv",sep=";",row.name=FALSE,quote=FALSE)
?write.table
write.table(temp,file = "Ref/Ref_VIPn.csv",sep=";",row.name=FALSE,quote=FALSE)
write.table(temp,file = "Ref/Ref_VIPn.csv")
write.table(temp,file = "Reference/Ref_VIPn.csv",sep=";",row.name=FALSE,quote=FALSE)
ref <- read.table("Reference/Ref_VIPn.csv", header = T, sep = ";") %>%
tbl_df %>% mutate(ID = as.character(ID))
ref
t <- read.table("ExtractionDB/VIP_BO_v20151210.csv", sep = ";", header = TRUE) %>% tbl_df
names(t) <- c("cEntr","cSor", "na","ID","DEntr", "DSor", "na2" )
t1 <- t %>%
mutate(
ID = substr(ID, 6, 17),
Ste = substr(ID, 1, 5),
Badge = substr(ID, 6, 12),
Porteur = substr(ID, 13, 17),
Entr = 25004000 + cEntr,
Sor = 25004000 + cSor,
Y = substr(DSor, 7, 10), M = substr(DSor, 4, 5),Day = substr(DSor, 1, 2),
Date = as.Date(paste0(Y, "-", M, "-", Day)),
DOW = as.POSIXlt(Date)$wday,
WOY = as.numeric(format(Date+3, "%U")),
HH = as.numeric(substr(DEntr, 12, 13)), MM = as.numeric(substr(DEntr, 15, 16)),
TimeEntr = HH + MM / 60,
HH = as.numeric(substr(DSor, 12, 13)), MM = as.numeric(substr(DSor, 15, 16)),
TimeSor = HH + MM / 60
) %>%
select(ID, Ste, Badge, Porteur, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor)
t1$Voie <- 0
t1
ref
t <- read.table("ExtractionDB/VIP_BO_v20151210.csv", sep = ";", header = TRUE) %>% tbl_df
names(t) <- c("cEntr","cSor", "na","ID","DEntr", "DSor", "na2" )
t1 <- t %>%
mutate(
Ste = substr(ID, 1, 5),
Badge = substr(ID, 6, 12),
Porteur = substr(ID, 13, 17),
ID = substr(ID, 6, 17),
Entr = 25004000 + cEntr,
Sor = 25004000 + cSor,
Y = substr(DSor, 7, 10), M = substr(DSor, 4, 5),Day = substr(DSor, 1, 2),
Date = as.Date(paste0(Y, "-", M, "-", Day)),
DOW = as.POSIXlt(Date)$wday,
WOY = as.numeric(format(Date+3, "%U")),
HH = as.numeric(substr(DEntr, 12, 13)), MM = as.numeric(substr(DEntr, 15, 16)),
TimeEntr = HH + MM / 60,
HH = as.numeric(substr(DSor, 12, 13)), MM = as.numeric(substr(DSor, 15, 16)),
TimeSor = HH + MM / 60
) %>%
select(ID, Ste, Badge, Porteur, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor)
t1$Voie <- 0
t1
t2 <- full_join(t1, ref)
str(t1)
str(re)
str(ref)
t <- read.table("ExtractionDB/VIP_BO_v20151210.csv", sep = ";", header = TRUE) %>% tbl_df
names(t) <- c("cEntr","cSor", "na","ID","DEntr", "DSor", "na2" )
t1 <- t %>%
mutate(
Ste = substr(ID, 1, 5) %>% as.numeric,
Badge = substr(ID, 6, 12) %>% as.numeric,
Porteur = substr(ID, 13, 17) %>% as.numeric,
ID = substr(ID, 6, 17),
Entr = 25004000 + cEntr,
Sor = 25004000 + cSor,
Y = substr(DSor, 7, 10), M = substr(DSor, 4, 5),Day = substr(DSor, 1, 2),
Date = as.Date(paste0(Y, "-", M, "-", Day)),
DOW = as.POSIXlt(Date)$wday,
WOY = as.numeric(format(Date+3, "%U")),
HH = as.numeric(substr(DEntr, 12, 13)), MM = as.numeric(substr(DEntr, 15, 16)),
TimeEntr = HH + MM / 60,
HH = as.numeric(substr(DSor, 12, 13)), MM = as.numeric(substr(DSor, 15, 16)),
TimeSor = HH + MM / 60
) %>%
select(ID, Ste, Badge, Porteur, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor)
t1$Voie <- 0
t1
sum(is.na(t1))
t1[is.na(t1),]
t1[is.na(t1$Badge),]
t1[is.na(t1$Ste),]
t1[is.na(t1$Porteur),]
str(t)
min(t$ID)
max(t$ID)
max(t1$ID)
t <- read.table("ExtractionDB/VIP_BO_v20151210.csv", sep = ";", header = TRUE) %>% tbl_df
names(t) <- c("cEntr","cSor", "na","ID","DEntr", "DSor", "na2","Ste", "Badge", "Porteur" )
t1 <- t %>%
mutate(
Entr = 25004000 + cEntr,
Sor = 25004000 + cSor,
Y = substr(DSor, 7, 10), M = substr(DSor, 4, 5),Day = substr(DSor, 1, 2),
Date = as.Date(paste0(Y, "-", M, "-", Day)),
DOW = as.POSIXlt(Date)$wday,
WOY = as.numeric(format(Date+3, "%U")),
HH = as.numeric(substr(DEntr, 12, 13)), MM = as.numeric(substr(DEntr, 15, 16)),
TimeEntr = HH + MM / 60,
HH = as.numeric(substr(DSor, 12, 13)), MM = as.numeric(substr(DSor, 15, 16)),
TimeSor = HH + MM / 60
) %>%
select(ID, Ste, Badge, Porteur, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor)
t1$Voie <- 0
t
names(t) <- c("cEntr","cSor", "na","ID","DEntr", "DSor", "na2","E","S",Ste", "Badge", "Porteur" )
t
names(t) <- c("cEntr","cSor", "na","ID","DEntr", "DSor", "na2","E","S","Ste", "Badge", "Porteur" )
t
t1 <- t %>%
mutate(
Entr = 25004000 + cEntr,
Sor = 25004000 + cSor,
Y = substr(DSor, 7, 10), M = substr(DSor, 4, 5),Day = substr(DSor, 1, 2),
Date = as.Date(paste0(Y, "-", M, "-", Day)),
DOW = as.POSIXlt(Date)$wday,
WOY = as.numeric(format(Date+3, "%U")),
HH = as.numeric(substr(DEntr, 12, 13)), MM = as.numeric(substr(DEntr, 15, 16)),
TimeEntr = HH + MM / 60,
HH = as.numeric(substr(DSor, 12, 13)), MM = as.numeric(substr(DSor, 15, 16)),
TimeSor = HH + MM / 60
) %>%
select(ID, Ste, Badge, Porteur, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor)
t1$Voie <- 0
t1
t2 <- full_join(t1, ref)
t1 <- t %>%
mutate(
ID = as.character(Badge * 1e5 + Porteur),
Entr = 25004000 + cEntr,
Sor = 25004000 + cSor,
Y = substr(DSor, 7, 10), M = substr(DSor, 4, 5),Day = substr(DSor, 1, 2),
Date = as.Date(paste0(Y, "-", M, "-", Day)),
DOW = as.POSIXlt(Date)$wday,
WOY = as.numeric(format(Date+3, "%U")),
HH = as.numeric(substr(DEntr, 12, 13)), MM = as.numeric(substr(DEntr, 15, 16)),
TimeEntr = HH + MM / 60,
HH = as.numeric(substr(DSor, 12, 13)), MM = as.numeric(substr(DSor, 15, 16)),
TimeSor = HH + MM / 60
) %>%
select(ID, Ste, Badge, Porteur, Entr, Sor, Date, DOW, WOY, TimeEntr, TimeSor)
t1$Voie <- 0
t1
t2 <- full_join(t1, ref)
t2
t2[is.na(t2$Nom),]%>% select(- (Entr:TimeSor)) %>% distinct
t2[is.na(t2$Badge),]%>% select(- (Entr:TimeSor)) %>% distinct
t.BO <- t2 %>%
filter(ID != 819831400001 & ID != 815815900011) %>%
select(-c(ID, Nom,N))
t.BO
t
t2 <- full_join(t1, ref)
t2 %>%
filter(ID != 819831400001 & ID != 815815900011) %>%
select(-c(ID, Nom,N))
t2 <- full_join(t1, ref, by = c(Badge, Porteur))
t2 <- full_join(t1, ref, by = c("Badge", "Porteur"))
t2
t.BO <- t2 %>%
select(-c(ID, Nom,N))
t.BO <- t2 %>% select(-c(Nom,N))
t2 <- full_join(t1, ref, by = c("Badge", "Porteur"))
t2 %>%
filter(ID != 819831400001 & ID != 815815900011) %>%
select(-c(ID, Nom,N))
t2 %>%
filter(ID != 819831400001 & ID != 815815900011) %>%
select(-c(Nom,N))
t2
t2 <- full_join(t1, ref)
t2 %>%
filter(ID != 819831400001 & ID != 815815900011) %>%
select(-c(Nom,N))
t2 %>%
filter(ID != 819831400001 & ID != 815815900011) %>%
select(-c(Nom,N)) %>% distinct
ref
t3 <- left_join(t1, ref)
t4 <- right_join(t1, ref)
t3
sum(is.na(t3))
sum(is.na(t3$ID))
sum(is.na(t3$Nom))
sum(is.na(t3$TimeEntr))
t3[is.na(t3$TimeEntr),]
t3[is.na(t3$EVA),]
count(t3,Nom)
count(t4,Nom)
t2 <- left_join(t1, ref)
t.BO <- t2 %>% select(-c(Nom,N)) %>% distinct
rm(t3,t4)
t <- rbind(t.BO,t.ESCOTA)
t.BO
t.ESCOTA
t.BO <- t2 %>% select(-c(ID, Nom,N)) %>% distinct
t <- rbind(t.BO,t.ESCOTA)
time <- Sys.time() %>% format(format = "%Y%m%d")
write.table(t, paste0("Input/VIP_v",time,".csv"),sep=";",row.name=FALSE,quote=FALSE)
source('~/GitHub/SA/Algo1.R')
source('~/GitHub/SA/Algo2.R')
result.TS <- read.table("Output/Algo1_VIP_v20151210_V20151210_1703.csv", header = T, sep = ";") %>% tbl_df
result.TS
result.TS %>% distinct
t <- left_join(result.TS,ref) %>% distinct
ref <- read.table("Reference/Ref_VIPn.csv", header = T, sep = ";")
t <- left_join(result.TS,ref) %>% distinct
t1 <- left_join(result.ZW,ref)
result.TS <- read.table("Output/Algo1_VIP_v20151210_V20151210_1703.csv", header = T, sep = ";") %>%
tbl_df %>% mutate(ID = as.character(ID))
ref <- read.table("Reference/Ref_VIPn.csv", header = T, sep = ";") %>%
tbl_df %>% mutate(ID = as.character(ID))
t <- left_join(result.TS,ref) %>% distinct
t1 <- left_join(result.ZW,ref)
t2 <- count(t,Nom) %>% rename(nTS = n)
t3 <- count(t1,Nom) %>% rename(nZW = n)
t4 <- full_join(t2,t3)
t4
t3
t2
t1
t <- trxZoneActive %>% inner_join(GridLimit)
# Get the first 9 users
k <- (t %>% select(ID) %>% distinct %>% slice(1:16))$ID
# Display
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
gares <- read.table("Reference/Ref_gares.csv", header = T, sep = ";") %>% tbl_df
t <- trxZoneActive %>% inner_join(GridLimit)
# Get the first 9 users
k <- (t %>% select(ID) %>% distinct %>% slice(1:16))$ID
# Display
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
t3
ref
result.TS
input
trx
input
max(input$Date)
t <-  input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
t
max(t$Datte)
max(t$Date)
min(t$Date)
day.start
dan.end
day.end
trx
count(trx,Sens)
t <- trx
t1 <- left_join(t, result.TS)
t1
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t2$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t2
t1
t1 <- cbind(result.TS,t2) %>% tbl_df
t1
t3 <- left_join(t,t1)
t3 <- inner_join(t,t1)
t3
t1
t
t1 <- left_join(t, result.TS)
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1 <- cbind(result.TS,t2) %>% tbl_df
t1
t3 <- inner_join(t,t1)
t3
t4 <- t3 %>% filter(TimeSor <= Tmax & TimeSor >= Tmin)
t4
t5 <- t4 %>% select(Ste: Sens) %>% distinct
t5
t
t6 <- left_join(t,t5)
t6
count(t6,TSt5)
t5
t5$TS <- TRUE
t6 <- left_join(t,t5)
t6
count(t6,TS)
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS))
rm(t1,t2,t3,t4,t5,t6)
trx.Algo2
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
t <- trx
### find trx in result.TS
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1 <- cbind(result.TS,t2) %>% tbl_df
t3 <- inner_join(t,t1)
t4 <- t3 %>% filter(TimeSor <= Tmax & TimeSor >= Tmin)
t5 <- t4 %>% select(Ste: Sens) %>% distinct
t5$TS <- TRUE
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
rm(t1,t2,t3,t4,t5)
trx
trx.Algo2
rm(list = ls())
library(dplyr)
library(cluster)
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# get sens
sens = read.table("Reference/Ref_sens.csv",sep = ";", header=TRUE)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# load function
source('Algo1_Functions.R', encoding = 'UTF-8')
source('Algo1_DataPreparation.R', encoding = 'UTF-8')
# prepare period
train.period <- data.frame(Date = seq(day.start, day.end - 30, "day"))
train.period$DOW <- as.POSIXlt(train.period$Date)$wday
test.period <- data.frame(Date = seq(day.end - 30, day.end, "day"))
test.period$DOW <- as.POSIXlt(test.period$Date)$wday
# divide the hisory into: train & test
train <- output %>% filter(Date < day.end - 30)
test <- output %>% filter(Date >= day.end - 30)
ID.list <- output %>% group_by(ID) %>% summarise()
##########
### Step 1: train & evaluate model
##########
# find first digit for Model
models.units <- getModel.units( output )
# Model 0 (decades) : BENCHMARK
result.model.decade.0 <- Model.for.a.decade(train,0,models.units)
### evalutaion model.00
test.model.0 <- GetResult(test, result.model.decade.0)
if(nrow(test.model.0) > 0) test.model.0$ModelDecade <- 0
ind.model.0 <- GetInd(test.model.0, result.model.decade.0)
if(nrow(ind.model.0) > 0)  ind.model.0$ModelDecade <- 0
# Model 1 (decades)	Time-Space
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
# Model 2 (decades) OD -> Space -> Time
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
### evalutaion model.02
test.model.2 <- GetResult(test, result.model.decade.2)
if(nrow(test.model.2) > 0) test.model.2$ModelDecade <- 2
ind.model.2 <- GetInd(test.model.2, result.model.decade.2)
if(nrow(ind.model.2) > 0)  ind.model.2$ModelDecade <- 2
### compare model results
Ind <- rbind(ind.model.0, ind.model.1, ind.model.2)
Ind <- inner_join ( Ind, models.units)
Ind.final <- Ind %>%
group_by(ID) %>%
summarise( Model = ModelDecade[Ind == max(Ind)][1]*10 + model[Ind == max(Ind)][1])
result <- rbind(result.model.decade.0, result.model.decade.1, result.model.decade.2)
rm(result.model.decade.0, test.model.0, ind.model.0,
result.model.decade.1, test.model.1, ind.model.1,
result.model.decade.2, test.model.2, ind.model.2)
result.TS <- inner_join(result, Ind.final) %>%
arrange (ID, desc(noPsg), Tmin) %>%
select(-Model) %>%
mutate(ID = as.character(as.numeric(ID))) %>%
filter(noPsg > 5) %>%
distinct
rm(Ind, Ind.final, models.units)
rm(ID.list,
test,train,
test.period,train.period)
t <- trx
# find trx in result.TS
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1 <- cbind(result.TS,t2) %>% tbl_df
t3 <- inner_join(t,t1)
t4 <- t3 %>% filter(TimeSor <= Tmax & TimeSor >= Tmin)
t5 <- t4 %>% select(Ste: Sens) %>% distinct
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
rm(t1,t2,t3,t4,t5)
t <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start & Date <= day.end)
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1 <- cbind(result.TS,t2) %>% tbl_df
t3 <- inner_join(t,t1)
t4 <- t3 %>% filter(TimeSor <= Tmax & TimeSor >= Tmin)
t5 <- t4 %>% select(Ste: Sens) %>% distinct
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
t5$TS <- TRUE
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
rm(t1,t2,t3,t4,t5)
trx <- trx.Algo2
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# transform Entr-Sor to Zone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
##########
### Step 4: find ID with only one big zone
##########
# get Grid detailed info for trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
##########
### Step 5: get Hourheatmap for OneZone
##########
# get ID with only one zone
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
# get time window frequency >= limit.WindowFreq
result.ZW <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
# %>%
#   filter(freq >= limit.WindowFreq)
rm(temp,ODtoGrid,GridLimit)
result.ZW
result.ZW %>% count(ID)
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result.TS,
paste0("Output/Algo_",inputName,"_V",time,".csv"),
sep=";",row.name=FALSE,quote=FALSE)
write.table(result.ZW, paste0("Output/Algo_",inputName,"_V",time,"_Window.csv"),sep=";",row.name=FALSE,quote=FALSE)
write.table(trxZoneActive, paste0("Output/Algo_",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
rm(inputName,time)
source('~/GitHub/SA/Algo.R')

y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 4
) +
facet_wrap(~Nom)  +
xlim(1,8) + ylim(42,45)
ggplot() +
geom_tile(data = viz.ZW,
aes(l + gridStep/2, d + gridStep/2, alpha = Per)) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat, col = as.factor(Societe)),
alpha = .5) +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,Slat),
colour = "red",
size = 4
) +
facet_wrap(~Nom)
ggplot() +
geom_tile(data = viz.ZW,
aes(l + gridStep/2, d + gridStep/2, alpha = Per)) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat, col = as.factor(Societe)),
alpha = .5) +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,Slat),
colour = "red",
size = 4
) +
facet_wrap(~Nom)  +
xlim(1,8) + ylim(42,45)
viz.ZW %>% select(ID,Nom) %>% distinct
viz.ZW %>% select(ID,Nom,N) %>% distinct
viz.ZW %>% select(ID,Nom,N) %>% distinct %>% arrange(N)
viz.ZW %>% select(ID,Nom,N) %>% distinct %>% arrange(N) %>% print(n=50)
t <- ggplot()
t
for(k in 1:nrow(ref)){
t <- ggplot()
t.ZW <- viz.ZW %>% filter(N == k)
t.TS <- viz.TS %>% filter(N == k)
if(nrow(t.ZW) > 0) {
t <- t +
geom_tile(data = t.ZW,
aes(r,u, alpha = Per)) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat,
col = as.factor(Societe)))
}
if(nrow(t.TS) > 0){
t <- t +
geom_segment(data = viz.TS %>% filter(N == k),
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2)
}
if(nrow(t.TS %>% filter(Entr == 0)) > 0){
t <- t +
geom_point(data = viz.TS %>% filter(Entr == 0, N == k),
aes(Slng, Slat),
colour = "red",
size = 4)
}
t <- t + facet_wrap(~Nom)
ggsave(filename = paste(ref$Nom[ref$N == k], '.jpg', sep=""),
plot = t)
}
t <- ggplot() +
geom_tile(data = viz.ZW %>% filter(N == k),
aes(r,u, alpha = Per)
)
t1 <- t+  geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat,
col = as.factor(Societe))) +
geom_segment(data = viz.TS %>% filter(N == k),
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0, N == k),
aes(Slng,
Slat
),
colour = "red",
size = 4
) +
facet_wrap(~Nom)
for(k in 1:nrow(ref)){
t.ZW <- viz.ZW %>% filter(N == k)
t.TS <- viz.TS %>% filter(N == k)
if(nrow(t.ZW) > 0 | nrow(t.TS) > 0){
t <- ggplot()
if(nrow(t.ZW) > 0) {
t <- t +
geom_tile(data = t.ZW,
aes(r,u, alpha = Per)) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat,
col = as.factor(Societe)))
}
if(nrow(t.TS) > 0){
t <- t +
geom_segment(data = viz.TS %>% filter(N == k),
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2)
}
if(nrow(t.TS %>% filter(Entr == 0)) > 0){
t <- t +
geom_point(data = viz.TS %>% filter(Entr == 0, N == k),
aes(Slng, Slat),
colour = "red",
size = 4)
}
t <- t + facet_wrap(~Nom)
ggsave(filename = paste(ref$Nom[ref$N == k], '.jpg', sep=""),
plot = t)
}
}
for(k in 1:nrow(ref)){
t.ZW <- viz.ZW %>% filter(N == k)
t.TS <- viz.TS %>% filter(N == k)
if(nrow(t.ZW) > 0 | nrow(t.TS) > 0){
t <- ggplot() + xlim(1:8) + ylim(42:45)
if(nrow(t.ZW) > 0) {
t <- t +
geom_tile(data = t.ZW,
aes(r,u, alpha = Per)) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat,
col = as.factor(Societe)))
}
if(nrow(t.TS) > 0){
t <- t +
geom_segment(data = viz.TS %>% filter(N == k),
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2)
}
if(nrow(t.TS %>% filter(Entr == 0)) > 0){
t <- t +
geom_point(data = viz.TS %>% filter(Entr == 0, N == k),
aes(Slng, Slat),
colour = "red",
size = 4)
}
t <- t + facet_wrap(~Nom)
ggsave(filename = paste(ref$Nom[ref$N == k], '.jpg', sep=""),
plot = t)
}
}
for(k in 1:nrow(ref)){
t.ZW <- viz.ZW %>% filter(N == k)
t.TS <- viz.TS %>% filter(N == k)
if(nrow(t.ZW) > 0 | nrow(t.TS) > 0){
t <- ggplot() + xlim(1,8) + ylim(42,45)
if(nrow(t.ZW) > 0) {
t <- t +
geom_tile(data = t.ZW,
aes(r,u, alpha = Per)) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat,
col = as.factor(Societe)))
}
if(nrow(t.TS) > 0){
t <- t +
geom_segment(data = viz.TS %>% filter(N == k),
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2)
}
if(nrow(t.TS %>% filter(Entr == 0)) > 0){
t <- t +
geom_point(data = viz.TS %>% filter(Entr == 0, N == k),
aes(Slng, Slat),
colour = "red",
size = 4)
}
t <- t + facet_wrap(~Nom)
ggsave(filename = paste(ref$Nom[ref$N == k], '.jpg', sep=""),
plot = t)
}
}
save.image()
library(ggplot2)
library(dplyr)
result.TS %>% filter(N == 6)
viz.TS %>% filter(N == 6)
trx %>% filter(ID == 980153310002)
input
input %>% filter(Badge == 9801533)
input %>% filter(Badge == 9801533) %>% print(n = 150)
viz.TS %>% filter(N == 45)
viz.TS %>% filter(N == 12)
viz.TS %>% filter(N == 13)
viz.ZW %>% filter(N == 13)
t1 <- trxZoneActiveH %>% group_by(ID,DOW,H) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
viz.ZW %>% filter(N == 5)
viz.TS %>% filter(N == 5)
trxZoneActiveH
t1 <- trxZoneActiveH %>% group_by(ID,DOW,H) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
t1
k
viz.TS %>% filter(N ==5)
viz.ZW %>% filter(N ==k)
trxZoneActiveH
viz.Window <- left_join(trxZoneActiveH,ref)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
viz.Window
viz.Window <- left_join(trxZoneActiveH,ref) %>% group_by(Nom,ID,N,DOW,H) %>% summarise(freq = n())
viz.Window
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 13
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 11
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 50
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 15
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 10
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 7
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 1
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
save.image()
k = 24
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
k = 8
viz.TS %>% filter(N ==k)
ggplot(viz.Window %>% filter(N %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
input %>% filter(EVA == 2423107
)
vis.TS
viz.TS
viz.TS %>% filter(EVA == 2423107)
library(dplyr)
library(cluster)
args <- read.table(paste0(ParamRepo,"/Param_Algo.csv"),sep = ";", header=TRUE)
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
filter <- args[1,6]
filter
filter == FALSE
class(filter)
trx
input
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
) %>%
filter(Date >= day.start)
trx
library(dplyr)
library(cluster)
# define Repository to get Parameters
ParamRepo <- NA
Args <- commandArgs(trailingOnly = TRUE)
ParamRepo <- Args[1]
if(is.na(ParamRepo)){
# get arguments
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
} else {
# get arguments
args <- read.table(paste0(ParamRepo,"/Param_Algo.csv"),sep = ";", header=TRUE)
}
rm(list = ls())
library(dplyr)
library(cluster)
ParamRepo <- NA
Args <- commandArgs(trailingOnly = TRUE)
ParamRepo <- Args[1]
if(is.na(ParamRepo)){
# get arguments
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
} else {
# get arguments
args <- read.table(paste0(ParamRepo,"/Param_Algo.csv"),sep = ";", header=TRUE)
}
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
# filter input file
filter <- args[1,6]
rm(args)
rm(Args)
sens = read.table("Reference/Ref_sens.csv",sep = ";", header=TRUE)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# load function
source('Algo1_Functions.R', encoding = 'UTF-8')
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
) %>%
filter(Date >= day.start)
if(filter == TRUE){
source('Algo1_DataPreparation.R', encoding = 'UTF-8')
}
# add sens & create OD
trx <- trx %>% mutate(Voie = ifelse(Entr == 0, Voie, 0))
trx <- trx %>% left_join(sens)
trx <- trx %>% mutate(SensEntr = ifelse(is.na(SensEntr), 0, SensEntr),
SensSor = ifelse(is.na(SensSor), 0, SensSor))
rm(sens)
trx <- trx %>% mutate(OD = paste0(Entr,"-",Sor,"-",SensEntr,"-",SensSor))
output <- trx
rm(trx)
train.period <- data.frame(Date = seq(day.start, day.end - 30, "day"))
train.period$DOW <- as.POSIXlt(train.period$Date)$wday
test.period <- data.frame(Date = seq(day.end - 30, day.end, "day"))
test.period$DOW <- as.POSIXlt(test.period$Date)$wday
# divide the hisory into: train & test
train <- output %>% filter(Date < day.end - 30)
test <- output %>% filter(Date >= day.end - 30)
ID.list <- output %>% group_by(ID) %>% summarise()
args <- read.table("Parameters/Param_Function.csv",sep = ";", header=TRUE)
args
param.min.uniqueTimeSor = args[1,1]    #low limit for using clustering
param.min.noPsg = args[1,2]            # low limit for choosing the result
param.min.nb.for.cluster = args[1,3]   # lower than which we won't clustering
param.max.nb.cluster = args[1,4]			 # the max number of cluster we'll test when choosing the number of cluster
param.model.2 = args[1,5]						   # low limit for choosing the ID-OD for Model.2 Space - Time
#getModelunits :
param.SDWprnoW <- args[1,6]
param.ind3 <- args[1,7]
args
param.min.uniqueTimeSor = args$min.uniqueTimeSor[1]    # low limit for using clustering
param.min.noPsg = args$min.noPsg[1]                    # low limit for choosing the result
param.min.nb.for.cluster = args$min.nb.for.cluster[1]  # lower than which we won't clustering
param.max.nb.cluster = args$max.nb.cluster[1]			     # the max number of cluster we'll test when choosing the number of cluster
param.model.2 = args$model.2[1]						             # low limit for choosing the ID-OD for Model.2 Space - Time
#getModelunits :
param.SDWprnoW <- args$SDWprnoW[1]                     # limit for decide model
param.ind3 <- args$ind3[1]                             # weight of Ind3 in calculation of Ind
rm(args)
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
args
filename.Input <- as.character(args$filename.Input[1])
limit.ZonePer <- args$limit.ZonePer[1]
limit.ActiveDay <- args$limit.ActiveDay[1]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args$day.start[1]))
day.end <- as.Date(as.character(args$day.end[1]))
# filter input file
filter <- args$filter[1]
result.ZW
source('~/GitHub/SA/Algo.R')
result.ZW
result.ZW %>% count(freq)
rresult.TS
result.TS
result.ZW <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(noPsg = n())
result.ZW %>% count(noPsg)
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
rm(list=ls())
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args$filename.Input[1])
limit.Algo1.noPsg <- args$limit.Algo1.noPsg[1]
limit.Algo2.ZonePer <- args$limit.Algo2.ZonePer[1]
limit.Algo2.ActiveDay <- args$limit.Algo2.ActiveDay[1]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args$day.start[1]))
day.end <- as.Date(as.character(args$day.end[1]))
# filter input file
filter <- args$filter[1]
rm(args)
rm(Args)
source('~/GitHub/SA/Algo.R')
result.ZW
result.TS
library(dplyr)
library(cluster)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
)
segmentation <- trx %>%
group_by(ID, EVA, Ste, Badge, Porteur) %>%
summary(TotalNoPsg = n())
segmentation
library(dplyr)
trx %>%
group_by(ID, EVA, Ste, Badge, Porteur) %>%
summary(TotalNoPsg = n())
trx %>%
group_by(ID, EVA, Ste, Badge, Porteur)
segmentation <- trx %>%
group_by(ID, EVA, Ste, Badge, Porteur) %>%
summarize(TotalNoPsg= n())
segmentation
segmentation <- trx %>%
group_by(ID) %>%
summarize(TotalNoPsg= n())
segmentation
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)
)
# construct segmentation for a summary of each client
segmentation <- trx %>%
group_by(ID) %>%
summarize(TotalNoPsg= n(),
TotalActiveDay = n_distinct(Date))
segmentation
trx <- trx %>% filter(Date >= day.start & Date <= day.end)
t <- trx %>%
group_by(ID) %>%
summarise(NoPsgInPeriod = n(),
ActiveDayInPeriod = n_distinct(Date))
t
segmentation <- left_join(segmentation, t)
segmentation
trx
count(trx,Sens)
t <- trx %>%
group_by(ID, Entr, Sor, Sens) %>%
summarise(noPsg = n())
t
count(t,noPsg)
t1 <- t %>% filter(noPsg >= 10) %>% group_by(ID) %>% summarise(NoOD10)
t1 <- t %>% filter(noPsg >= 10) %>% group_by(ID) %>% summarise(NoOD10 = n())
t1
t1 <- t %>% filter(noPsg >= 5) %>% group_by(ID) %>% summarise(NoOD10 = n())
t1 <- t %>% filter(noPsg >= 10) %>% group_by(ID) %>% summarise(NoOD10 = n())
segmentation <- left_join(segmentation, t1)
segmentation
count(segmentation,NoOD10)
t1
segmentation
t1
count(segmentation,NoOD12)
count(segmentation,NoOD10)
rm(t,t1)
result.TS
t <- result.TS %>% group_by(ID) %>% summarise(NoODTS = n_distinct(OD))
t
segmentation <- left_join(segmentation, t)
segmentation
result.TS
result.ZW
segmentation
segmentation[is.na(segmentation)] <- 0
segmentation
source('~/GitHub/SA/Algo.R')
segmentation
ggplot(segmentation) + geom_density(aes(NoPsgPerActiveDayInPeriod))
library(ggplot2)
ggplot(segmentation) + geom_density(aes(NoPsgPerActiveDayInPeriod))
ggplot(segmentation) + geom_density(aes(NoPsgPerActiveDayInPeriod, col = "IP")) + geom_density(aes(TotalNoPsgPerActiveDay, col = "total"))

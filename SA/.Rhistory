geom_tile(aes(l,d, alpha = Per))
ggplot(viz.ZW) +
geom_tile(aes(l,d, alpha = Per)) +
facet_wrap(~Nom)
viz.ZW <- t %>% inner_join(GridLimit)
ggplot(viz.ZW) +
geom_tile(aes(l,d, alpha = Per)) +
facet_wrap(~Nom)
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat, alpha = noPsg )
) +
geom_tile(data = viz.ZW, aes(l,d, alpha = Per)) +
facet_wrap(~Nom)
gares
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat, alpha = noPsg )
) +
geom_tile(data = viz.ZW, aes(l,d, alpha = Per)) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5),
aes(Lng, Lat, col = as.factor(Societe)))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat, alpha = noPsg )
) +
geom_tile(data = viz.ZW, aes(l,d, alpha = Per)) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat, col = as.factor(Societe)))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
)
) +
geom_tile(data = viz.ZW,
aes(l,d, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
viz.TS %>% count(Nom)
viz.TS %>% filter(is.na(Nom))
t <- left_join(trxZoneActive, ref)
t %>% filter(is.na(Nom))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
)
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat,
col = red
)
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat,
col = "red"
)
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red"
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 2
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 2
) +
geom_tile(data = viz.ZW,
aes(l,d, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 2
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 3
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .1))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 3
) +
geom_tile(data = viz.ZW,
aes(r,l, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .2))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 3
) +
geom_tile(data = viz.ZW,
aes(r,d, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .2))
ggplot() +
geom_segment(data = viz.TS,
aes(x=Elng,xend=Slng,
y=Elat,yend=Slat
),
colour = "red",
size = 2
) +
geom_point(data = viz.TS %>% filter(Entr == 0),
aes(Slng,
Slat
),
colour = "red",
size = 3
) +
geom_tile(data = viz.ZW,
aes(r,u, alpha = Per)
) +
facet_wrap(~Nom) +
geom_point(data= gares %>% filter(Societe != 5,
Lat < 45,
Lng >3),
aes(Lng, Lat,
col = as.factor(Societe),
alpha = .2))
t <- left_join(trxZoneActiveH, ref)
t1 <- t %>% group_by(Nom,DOW,H) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
ggplot(t1) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~Nom)
?commandArgs
source('~/GitHub/SA/Algo.R')
source('~/GitHub/SA/Algo1.R')
source('~/GitHub/SA/Algo2.R')
source('~/GitHub/SA/Algo.R')
install.packages("dplyr")
install.packages(c("dplyr", "ggmap", "gridExtra", "markdown", "plyr"))
print("Log: Step 0")
# load package
library(dplyr)
library(cluster)
# define Repository to get Parameters
ParamRepo <- NA
Args <- commandArgs(trailingOnly = TRUE)
ParamRepo <- Args[1]
ParamRepo <- "P1"
if(is.na(ParamRepo)){
# get arguments
args <- read.table("Parameters/Param_Algo.csv",sep = ";", header=TRUE)
} else {
# get arguments
args <- read.table(paste0(ParamRepo,"/Param_Algo.csv"),sep = ";", header=TRUE)
}
args
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
rm(Args)
# get Reference data from Reference/
sens = read.table("Reference/Ref_sens.csv",sep = ";", header=TRUE)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# load function
source('Algo1_Functions.R', encoding = 'UTF-8')
source('Algo1_DataPreparation.R', encoding = 'UTF-8')
# prepare period
train.period <- data.frame(Date = seq(day.start, day.end - 30, "day"))
train.period$DOW <- as.POSIXlt(train.period$Date)$wday
test.period <- data.frame(Date = seq(day.end - 30, day.end, "day"))
test.period$DOW <- as.POSIXlt(test.period$Date)$wday
# divide the hisory into: train & test
train <- output %>% filter(Date < day.end - 30)
test <- output %>% filter(Date >= day.end - 30)
ID.list <- output %>% group_by(ID) %>% summarise()
##########
### Step 1: train & evaluate model
##########
print("Log: Step 1")
# find first digit for Model
models.units <- getModel.units( output )
# Model 0 (decades) : BENCHMARK
result.model.decade.0 <- Model.for.a.decade(train,0,models.units)
### evalutaion model.00
test.model.0 <- GetResult(test, result.model.decade.0)
if(nrow(test.model.0) > 0) test.model.0$ModelDecade <- 0
ind.model.0 <- GetInd(test.model.0, result.model.decade.0)
if(nrow(ind.model.0) > 0)  ind.model.0$ModelDecade <- 0
# Model 1 (decades)	Time-Space
result.model.decade.1 <- Model.for.a.decade(train,1,models.units)
### evalutaion model.01
test.model.1 <- GetResult(test, result.model.decade.1)
if(nrow(test.model.1) > 0) test.model.1$ModelDecade <- 1
ind.model.1 <- GetInd(test.model.1, result.model.decade.1)
if(nrow(ind.model.1) > 0)  ind.model.1$ModelDecade <- 1
# Model 2 (decades) OD -> Space -> Time
result.model.decade.2 <- Model.for.a.decade(train,2,models.units)
### evalutaion model.02
test.model.2 <- GetResult(test, result.model.decade.2)
if(nrow(test.model.2) > 0) test.model.2$ModelDecade <- 2
ind.model.2 <- GetInd(test.model.2, result.model.decade.2)
if(nrow(ind.model.2) > 0)  ind.model.2$ModelDecade <- 2
### compare model results
Ind <- rbind(ind.model.0, ind.model.1, ind.model.2)
Ind <- inner_join ( Ind, models.units)
Ind.final <- Ind %>%
group_by(ID) %>%
summarise( Model = ModelDecade[Ind == max(Ind)][1]*10 + model[Ind == max(Ind)][1])
result <- rbind(result.model.decade.0, result.model.decade.1, result.model.decade.2)
rm(result.model.decade.0, test.model.0, ind.model.0,
result.model.decade.1, test.model.1, ind.model.1,
result.model.decade.2, test.model.2, ind.model.2)
result.TS <- inner_join(result, Ind.final) %>%
arrange (ID, desc(noPsg), Tmin) %>%
select(-Model) %>%
mutate(ID = as.character(as.numeric(ID))) %>%
filter(noPsg > 5) %>%
distinct
rm(Ind, Ind.final, models.units)
rm(ID.list,
test,train,
test.period,train.period)
##########
### Step 2: Prepare for Algo2 - Get Trx not in Result.TS
##########
print("Log: Step 2")
t <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start & Date <= day.end)
# find trx in result.TS
t1 <- result.TS %>% transmute(OD =as.character(OD))
t2 <- read.table(text = t1$OD,sep="-") %>% tbl_df %>%
transmute(Entr = V1, Sor = V2)
t1 <- cbind(result.TS,t2) %>% tbl_df
t3 <- inner_join(t,t1)
t4 <- t3 %>% filter(TimeSor <= Tmax & TimeSor >= Tmin)
t5 <- t4 %>% select(Ste: Sens) %>% distinct
t5$TS <- TRUE
trx.Algo2 <- left_join(t,t5) %>% filter(is.na(TS)) %>% select(-TS)
rm(t1,t2,t3,t4,t5)
trx <- trx.Algo2
# get Reference data from Reference/
# run Algo2_makeGrid to have "Ref_ODtoGrid.csv" and "Ref_GridLimit.csv"
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
##########
### Step 3: find Zone frequently visited
##########
print("Log: Step 3")
# transform Entr-Sor to Zone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
trxZoneActive
GridLimit
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
print("Log: Step 4.0")
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col) %>% ungroup
t
t %>% arrange(Row, desc(Col))
t %>% arrange(Row, desc(Col))       %>% select(Row, Col)
t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1)
t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col)  %>% rename(R_NW = Row, C_NW = Col) %>% slice(1) %>% ungroup
t %>% arrange(Row, Col)             %>% select(Row, Col)  %>% rename(R_NW = Row, C_NW = Col)
t %>% arrange(Row, Col)             %>% select(Row, Col)  %>% rename(R_NW = Row, C_NW = Col) %>% slice(1)
.libPaths()
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("ggplot2")
pwd
getwd()
library(dplyr)
t <- read.table("gares_geolocalisees.csv") %>% tbl_df
t <- read.table("gares_geolocalisees.csv", sep = ",") %>% tbl_df
t <- read.table("gares_geolocalisees.csv", sep = ";") %>% tbl_df
t <- read.table("gares_geolocalisees.csv", sep = ";", header = TRUE) %>% tbl_df
t <- read.table("gares_geolocalisees.csv", sep = ",", header = TRUE) %>% tbl_df
t <- read.table("gares_geolocalisees.csv", sep = ";", header = TRUE) %>% tbl_df
t
str(t)
t <- read.table("gares_geolocalisees.csv", sep = ";", header = TRUE) %>% tbl_df
t
ggplot(t) + goem_point(aes(Longitude,Lattitude))
library(ggplot2)
ggplot(t) + goem_point(aes(Longitude,Lattitude))
ggplot(t) + geom_point(aes(Longitude,Lattitude))
ggplot(t) + geom_point(aes(Longitude,Latitude))
t %>% filter(Latitude == 0)
ggplot(t %>% filter(Latitude > 0)) + geom_point(aes(Longitude,Latitude))

temp
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
One_Zone = Left && Right)
temp
count(temp,Left,Right)
rm(t1,t2,t3,t4)
count(temp,One_Zone)
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
temp
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
>>>>>>> origin/master
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
<<<<<<< HEAD
temp
count(temp,OneZone)
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
t
t <- inner_join(t,trxZone)
t <- t %>% select(-Zone) %>% ungroup %>% distinct
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
trxZoneActiveH
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
result
trxZoneActiveH
filename.Input
read.table(filename.Input, sep=".")$V1
read.table(text = filename.Input, sep=".")$V1
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character()
rm(list=ls())
library(dplyr)
# get Parameter from Parameter/Param_Algo2
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
##########
### Step 1: add ID & get only the trx in the period
##########
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
##########
### Step 3: find ID with only one big zone
##########
# get Grid detailed info for trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
=======
>>>>>>> origin/master
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
<<<<<<< HEAD
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
##########
### Step 4: get Hourheatmap for OneZone
##########
# get ID with only one zone
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
=======
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
temp
temp
t
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
t
trxZone
trxZoneActive
t1 <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
t1
t2 <- inner_join(t1,trxZone)
t2
count(t2,ID)
temp
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
>>>>>>> origin/master
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
<<<<<<< HEAD
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
# %>%
#   filter(freq >= limit.WindowFreq)
rm(temp,ODtoGrid,GridLimit)
##########
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result, paste0("Output/Output_from_",inputName,"_V",time,".csv"),sep=";",row.name=FALSE,quote=FALSE)
rm(inputName,time)
write.table(trxZoneActive, paste0("Output/",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result, paste0("Output/",inputName,"_V",time,"_Window.csv"),sep=";",row.name=FALSE,quote=FALSE)
write.table(trxZoneActive, paste0("Output/",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
source('~/GitHub/SA_Algo2_ZoneWindow/Algo2_mainWithoutArgs.R')
rm(list=ls())
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
class(day.end)
class(day.start)
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
str(input)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
str(trx)
rm(list=ls())
=======
t <- t %>% select(-c(OD,Row,Col)) %>% ungroup %>% distinct
t
t
t1 <- t %>% select(-Zone) %>% ungroup %>% distinct
t1
count(t1, TimeEntr == 0)
t2 <- t1 %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
t2
t3 <- t2 %>% group_by(ID,DOW,H) %>% summarise(freq = n())
t3
limit.WindowFreq <- 5
result <- t2 %>%
group_by(ID,DOW,H) %>%
summarise(freq = n()) %>%
filter(freq >= limit.WindowFreq)
result
count(result,ID)
count(t2,ID)
t2
t3
t3 %>% count(ID)
ggplot(t3) + geom_bar(aes(freq))
source('~/GitHub/SA_Algo2_ZoneWindow/mainWithoutArgs.R')
source('~/GitHub/SA_Algo2_ZoneWindow/mainWithoutArgs.R')
result
count(result,ID)
source('~/GitHub/SA_Algo2_ZoneWindow/mainWithoutArgs.R')
count(result,ID)
>>>>>>> origin/master
library(dplyr)
# get Parameter from Parameter/Param_Algo2
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# get Reference data from Reference/
# run Algo2_makeGrid to have "Ref_ODtoGrid.csv" and "Ref_GridLimit.csv"
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start & Date <= day.end)
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
##########
### Step 3: find ID with only one big zone
##########
# get Grid detailed info for trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
##########
### Step 4: get Hourheatmap for OneZone
##########
# get ID with only one zone
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
# get time window frequency >= limit.WindowFreq
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
# %>%
#   filter(freq >= limit.WindowFreq)
rm(temp,ODtoGrid,GridLimit)
##########
### Step 5: Output in Output/
##########
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result, paste0("Output/",inputName,"_V",time,"_Window.csv"),sep=";",row.name=FALSE,quote=FALSE)
write.table(trxZoneActive, paste0("Output/",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
rm(inputName,time)
rm(list=ls())
##########
### Step 0: Prepare
##########
# load package
library(dplyr)
# get Parameter from Parameter/Param_Algo2
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# get Reference data from Reference/
# run Algo2_makeGrid to have "Ref_ODtoGrid.csv" and "Ref_GridLimit.csv"
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
##########
### Step 1: add ID & get only the trx in the period
##########
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
trx <- trx %>%  filter(Date >= day.start & Date <= day.end)
##########
### Step 2: find Zone frequently visited
##########
# transform Entr-Sor to Zone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
##########
### Step 3: find ID with only one big zone
##########
# get Grid detailed info for trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
##########
### Step 4: get Hourheatmap for OneZone
##########
# get ID with only one zone
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
# get time window frequency >= limit.WindowFreq
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
# %>%
#   filter(freq >= limit.WindowFreq)
rm(temp,ODtoGrid,GridLimit)
##########
### Step 5: Output in Output/
##########
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result, paste0("Output/",inputName,"_V",time,"_Window.csv"),sep=";",row.name=FALSE,quote=FALSE)
write.table(trxZoneActive, paste0("Output/",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
rm(inputName,time)
result
trxZoneActive
rm(list=ls())
library(dplyr)
# get Parameter from Parameter/Param_Algo2
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# get Reference data from Reference/
# run Algo2_makeGrid to have "Ref_ODtoGrid.csv" and "Ref_GridLimit.csv"
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
trx <- trx %>%  filter(Date >= day.start & Date <= day.end)
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
input
str(input)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start) %>%
filter(Date <= day.end)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
trx1 <- trx[trx$Date >= day.start   ,]
str(trx)
source('~/GitHub/SA_Algo2_ZoneWindow/Algo2_mainWithoutArgs.R')

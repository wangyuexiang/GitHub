##########
### 2.3 create ref table: Entr-Sor to Grid
##########
Grid <- inner_join(t.grid,temp1, by = "t") %>%
filter(u > D,
d < U,
r > L,
l < R) %>%
select(Entr,Sor,Zone)
rm(temp1)
##########
### 3 Output result
##########
t.grid <- t.grid %>%
select(Zone,
Row,Col,
u,d,l,r)
t.grid
Grid
rm(Grid,t.grid)
# divide lattitude by 0.5 degree
# u = upper
# d = down
t.lat <- data.frame(
d = seq(42, 49 - gridStep, gridStep),
u = seq(42 + gridStep, 49, gridStep),
Row = seq(1, (49-42)/gridStep)
)
# divide longitude by 0.5 degree
# l = left
# r = right
t.lng <- data.frame(
l = seq(-2, 8 - gridStep, gridStep),
r = seq(-2 + gridStep, 8  , gridStep),
Col = seq(1,(8+2)/gridStep)
)
# create grid with Row & Col number
t.lat$t <- 1
t.lng$t <- 1
GridLimit <- inner_join(t.lat, t.lng) %>%
tbl_df %>%
mutate(Zone = paste0(Row,"-",Col))
rm(t.lat, t.lng)
##########
### Step 2: find upper, down, left, right limit for each Entr-Sor possible
##########
##########
### 2.1 get Gares Lng & Lat
##########
## TODO: update Ref_gares.csv, many missing Lng & Lat, wrong Code
gares <- read.table("Ref_gares.csv",sep = ",", header=TRUE) %>%
tbl_df %>%
transmute(Ste = Societe,
Cde,Lng, Lat)
##########
### 2.2 find relationship: Entr, Sor -> U,D,L,R (four limit for each Entr-Sor)
##########
sens = read.table("Ref_sens.csv",sep = ";", header=TRUE) %>% tbl_df
temp <- sens %>% select(Entr, Sor) %>% distinct %>% tbl_df
t <- gares %>% transmute(Entr = Cde, Elng = Lng, Elat = Lat)
temp <- left_join(temp, t)
t <- gares %>% transmute(Sor = Cde, Slng = Lng, Slat = Lat)
temp <- left_join(temp, t)
rm(t)
delta.Lat = zoneStep
delta.Lng = zoneStep
t1 <- temp %>%
filter(is.na(Elat) & !is.na(Slat)) %>%
mutate(u=Slat + delta.Lat ,
d=Slat - delta.Lat,
r=Slng + delta.Lng,
l=Slng - delta.Lng)
t2 <- temp %>%
filter(!is.na(Elat) & is.na(Slat)) %>%
mutate(u=Elat + delta.Lat,
d=Elat - delta.Lat,
r=Elng + delta.Lng,
l=Elng - delta.Lng)
t3 <- temp %>%
filter(!is.na(Elat) & !is.na(Slat)) %>%
mutate(
u = ( Elat + Slat + abs(Elat - Slat) )/2,
d = ( Elat + Slat - abs(Elat - Slat) )/2,
r = ( Elng + Slng + abs(Elng - Slng) )/2,
l = ( Elng + Slng - abs(Elng - Slng) )/2
)
temp1 <- rbind(t1,t2,t3) %>% rename(U=u, D=d, L=l, R=r)
temp1 <- temp1 %>%
mutate(t = 1) %>%
select(- c(Elng,Elat,Slng,Slat))
rm(t1,t2,t3,temp, gares, sens)
##########
### 2.3 create ref table: Entr-Sor to Grid
##########
ODtoGrid <- inner_join(GridLimit,temp1, by = "t") %>%
filter(u > D,
d < U,
r > L,
l < R) %>%
select(Entr,Sor,Zone)
rm(temp1, delta.Lng, delta.Lat)
##########
### 3 Output result
##########
GridLimit <- GridLimit %>%
select(Zone,
Row,Col,
u,d,l,r)
GridLimit
ODtoGrid
rm(zoneStep,gridStep)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
trx <- trx %>% filter(Date >= start)
trx
t <- read.table("GridLimit.csv", header = T, sep = ";") %>% tbl_df
t <- read.table("Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
rm(t)
GridLimit
ODtoGrid
trx
GridLimit
ODtoGrid
ODtoGrid %>% filter(Entr == 0)
trxZone <- trx %>% inner_join(ODtoGrid)
trxZone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
t <- inner_join(t1,t2) %>% mutate(Per = Day / ActiveDay)
rm(t1,t2)
trxZone
t
count(t,ID)
count(trx,ID)
t
t
library(ggplot2)
ggplot(t) + geom_density(Per)
ggplot(t) + geom_density(aes(Per))
ggplot(t %>% filter(ActiveDay > 4)) + geom_density(aes(Per))
count(t,ID)
count(t %>% filter(ActiveDay > 4),ID)
trxZone
t
limit.ZonePer <- .5
limit.MinActiveyDay <- 5
limit.ActiveyDay <- 5
rm(limit.ActiveyDay)
filename.Input <- "App.csv"
filename.Output <- "Output.csv"
rm(InputFileName,OutputFileName)
day.start <- as.Date("2015-5-1")
day.end <- as.Date("2015-8-31")
rm(start,end)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone which has
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveyDay,
Per >= limit.ZonePer)
rm(t1,t2)
rm(t)
limit.ZonePer <- .5
limit.ActiveyDay <- 5
rm(limit.MinActiveyDay)
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveyDay,
Per >= limit.ZonePer)
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone which has
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveyDay,
Per >= limit.ZonePer)
rm(t1,t2)
trxZoneActive
save.image()
t <- inner_join(trxZoneActive, GridLimit)
GridLimit
trxZoneActive
count(trxZoneActive)
count(trxZoneActive,ID)
count(trxZoneActive,ID) %>% ggplot + geom_bar(aes(n))
t
class(t)
t <- t %>% group_by(ID)
t
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
temp
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
One_Zone = Left && Right)
temp
count(temp,Left,Right)
rm(t1,t2,t3,t4)
count(temp,One_Zone)
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
temp
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
temp
temp
t
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
t
trxZone
trxZoneActive
t1 <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
t1
t2 <- inner_join(t1,trxZone)
t2
count(t2,ID)
temp
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t <- t %>% select(-c(OD,Row,Col)) %>% ungroup %>% distinct
t
t
t1 <- t %>% select(-Zone) %>% ungroup %>% distinct
t1
count(t1, TimeEntr == 0)
t2 <- t1 %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
t2
t3 <- t2 %>% group_by(ID,DOW,H) %>% summarise(freq = n())
t3
limit.WindowFreq <- 5
result <- t2 %>%
group_by(ID,DOW,H) %>%
summarise(freq = n()) %>%
filter(freq >= limit.WindowFreq)
result
count(result,ID)
count(t2,ID)
t2
t3
t3 %>% count(ID)
ggplot(t3) + geom_bar(aes(freq))
source('~/GitHub/SA_Algo2_ZoneWindow/mainWithoutArgs.R')
source('~/GitHub/SA_Algo2_ZoneWindow/mainWithoutArgs.R')
result
count(result,ID)
source('~/GitHub/SA_Algo2_ZoneWindow/mainWithoutArgs.R')
count(result,ID)
library(dplyr)
result
count(result)
count(result,ID)
filename.Input <- "VIP.csv"
filename.Output <- "Output.csv"
limit.ZonePer <- .5
limit.ActiveyDay <- 5
# limit.WindowFreq <- 5
input <- read.table(filename.Input, header = T, sep = ";") %>% tbl_df
library(dplyr)
input <- read.table(filename.Input, header = T, sep = ";") %>% tbl_df
input
day.start <- as.Date("2015-5-1")
day.end <- as.Date("2015-8-31")
##########
### Step 1: add ID & get only the trx in the period
##########
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
##########
### Step 2: find Zone frequently visited
##########
# get ODtoGrid
ODtoGrid <- read.table("Ref_ODtoGrid.csv", header = T, sep = ";") %>% tbl_df
# transform Entr-Sor to Zone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveyDay,
Per >= limit.ZonePer)
rm(t1,t2)
##########
### Step 3: find ID with only one big zone
##########
# get GridLimit
GridLimit <- read.table("Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
# get Grid detailed info for trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
t1 <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
t2 <- t1 %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
result <- t2 %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
result
count(result,ID)
gares
trxZone
GridLimit
trxZone
trxZoneActive
t <- trxZoneActive %>% inner_join(GridLimit)
t
gares <- read.table("Ref_gares.csv", header = T, sep = ";") %>% tbl_df
gares
gares <- read.table("Ref_gares.csv", header = T, sep = ",") %>% tbl_df
gares
ggplot(t) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
library(ggplot2)
t <- trxZoneActive %>% inner_join(GridLimit)
ggplot(t) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
t
sum(is.na(t))
ggplot(t) +
geom_tile(aes(l,d, alpha = Per))
ggplot(t) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID)
t
count(t, ActiveDay)
ggplot(t) + geom_density(aes(ActiveDay))
class(c(1,3))
t$ID
t$ID[4]
t %>% select(ID) %>% distinct %>% slice(1:5)
(t %>% select(ID) %>% distinct %>% slice(1:5))$ID
k <- (t %>% select(ID) %>% distinct %>% slice(1:5))$ID
t %>% filter(ID %in% k)
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
k <- (t %>% select(ID) %>% distinct %>% slice(1:9))$ID
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
result
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t1 <- t %>% select(-Zone) %>% ungroup %>% distinct
t
t1
temp1 <- t %>% select(-Zone) %>% ungroup %>% distinct
trxZoneActiveH
trxZoneActiveH <- t %>% select(-Zone) %>% ungroup %>% distinct
t2 <- trxZoneActiveH %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
t2
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
trxZoneActiveH
result
trxZoneActiveH
t1 <- trxZoneActiveH %>% group_by(ID,DOW,H) %>% summarise(freq = n())
t2 <- trxZoneActiveH %>% group_by(ID,DOW,H_2) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
ggplot(t2 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H_2, fill = freq)) + facet_wrap(~ID)
rm(temp1)
rm(t,t1,t2)
rm(t,t1,t2,k)
rm(t,t1,t2,k,gares)
GridLimit <- read.table("Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
gares <- read.table("Ref_gares.csv", header = T, sep = ",") %>% tbl_df
##########
### Zone
##########
# Connect AcitveZone with GridLimit
t <- trxZoneActive %>% inner_join(GridLimit)
# Get the first 9 users
k <- (t %>% select(ID) %>% distinct %>% slice(1:16))$ID
# Display
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
t1 <- trxZoneActiveH %>% group_by(ID,DOW,H) %>% summarise(freq = n())
t2 <- trxZoneActiveH %>% group_by(ID,DOW,H_2) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
rm(t,t1,t2,k,gares)

ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
ggplot(t2 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H_2, fill = freq)) + facet_wrap(~ID)
rm(temp1)
rm(t,t1,t2)
rm(t,t1,t2,k)
rm(t,t1,t2,k,gares)
GridLimit <- read.table("Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
gares <- read.table("Ref_gares.csv", header = T, sep = ",") %>% tbl_df
##########
### Zone
##########
# Connect AcitveZone with GridLimit
t <- trxZoneActive %>% inner_join(GridLimit)
# Get the first 9 users
k <- (t %>% select(ID) %>% distinct %>% slice(1:16))$ID
# Display
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
t1 <- trxZoneActiveH %>% group_by(ID,DOW,H) %>% summarise(freq = n())
t2 <- trxZoneActiveH %>% group_by(ID,DOW,H_2) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
rm(t,t1,t2,k,gares)
gares <- read.table("Reference\Ref_gares.csv", header = T, sep = ",") %>% tbl_df
gares <- read.table("Reference/Ref_gares.csv", header = T, sep = ",") %>% tbl_df
library(dplyr)
gares <- read.table("Reference/Ref_gares.csv", header = T, sep = ",") %>% tbl_df
gares <- read.table("Reference/Ref_gares.csv", header = T, sep = ",") %>% tbl_df
rm(gares)
args <- read.table("Parameters\Param_makeGrid.csv",sep = ";", header=TRUE)
args <- read.table("Parameter\Param_makeGrid.csv",sep = ";", header=TRUE)
args <- read.table("Parameters\Param_makeGrid.csv",sep = ";", header=TRUE)
args <- read.table("Parameters/Param_makeGrid.csv",sep = ";", header=TRUE)
args <- read.table("Parameters/Param_makeGrid.csv",sep = ";", header=TRUE)
args
gridStep <- args[1,1] # unit in degree, width & height of each grid rectangular
zoneStep <- args[1,2] # unit in degree, extension for Entr or Sor with no Lng&Lat, ex. Systeme Ouvert
rm(zoneStep,gridStep)
rm(args)
args <- read.table("Parameters/Param_makeGrid.csv",sep = ";", header=TRUE)
gridStep <- args[1,1] # unit in degree, width & height of each grid rectangular
zoneStep <- args[1,2] # unit in degree, extension for Entr or Sor with no Lng&Lat, ex. Systeme Ouvert
gares
gares <- read.table("Reference/Ref_gares.csv",sep = ";", header=TRUE) %>%
tbl_df %>%
transmute(Ste = Societe,
Cde,Lng, Lat)
library(dplyr)
gares <- read.table("Reference/Ref_gares.csv",sep = ";", header=TRUE) %>%
tbl_df %>%
transmute(Ste = Societe,
Cde,Lng, Lat)
gares
sens = read.table("Reference/Ref_sens.csv",sep = ";", header=TRUE) %>% tbl_df
sens
rm(args)
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
gares <- read.table("Reference/Ref_gares.csv", header = T, sep = ",") %>% tbl_df
gares
source('~/GitHub/SA_Algo2_ZoneWindow/Algo2_VizZoneWindow.R')
t <- trxZoneActive %>% inner_join(GridLimit)
GridLimit
class(GridLimit$Zone)
str(GridLimit)
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
gares <- read.table("Reference/Ref_gares.csv", header = T, sep = ";") %>% tbl_df
t <- trxZoneActive %>% inner_join(GridLimit)
str(trxZoneActive)
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df
t <- trxZoneActive %>% inner_join(GridLimit)
t
k <- (t %>% select(ID) %>% distinct %>% slice(1:16))$ID
k
ggplot(t %>% filter(ID %in% k)) +
geom_tile(aes(l,d, alpha = Per)) +
xlim(c(-2,8)) + ylim(c(42,49)) +
facet_wrap(~ID) +
geom_point(data= gares, aes(Lng, Lat, col = as.factor(Societe)))
t1 <- trxZoneActiveH %>% group_by(ID,DOW,H) %>% summarise(freq = n())
t2 <- trxZoneActiveH %>% group_by(ID,DOW,H_2) %>% summarise(freq = n())
ggplot(t1 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H, fill = freq)) + facet_wrap(~ID)
ggplot(t2 %>% filter(ID %in% k)) + geom_tile(aes(DOW,H_2, fill = freq)) + facet_wrap(~ID)
rm(t,t1,t2,k,gares)
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
args
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
args
str(args)
library(dplyr)
filename.Input <- args[1,1]
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
rm(limit.ActiveDay)
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(list=ls())
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>% tbl_df
trxZone <- trx %>% inner_join(ODtoGrid)
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
GridLimit <- read.table("Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
##########
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
rm(temp,t1,t2,ODtoGrid,GridLimit)
now()
Sys.time()
time <- Sys.time()
timeclass(time)
class(time)
as.Date(time)
as.character(time)
Sys.time()$Year
Sys.time()$Y
?POSIXct
time <- Sys.time() %>%
format(format = "%Y%M%D_%H%M")
time
time <- timme %>%  format(format = "%Y%m%D_%H%M")
time <- time %>%  format(format = "%Y%m%D_%H%M")
time
Sys.time() %>%
format(format = "%Y%m%D_%H%M")
Sys.time() %>%
format(format = "%Y%m%d_%H%M")
time <- Sys.time() %>%
format(format = "%Y%m%d_%H%M")
classs(time)
class(time)
rm(list=ls())
source('~/GitHub/SA_Algo2_ZoneWindow/Algo2_mainWithoutArgs.R')
source('~/GitHub/SA_Algo2_ZoneWindow/Algo2_mainWithoutArgs.R')
rm(list=ls())
### Step 0: Prepare
##########
# load package
library(dplyr)
# get Parameter from Parameter/Param_Algo2
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
# get Reference data from Reference/
# run Algo2_makeGrid to have "Ref_ODtoGrid.csv" and "Ref_GridLimit.csv"
# get ODtoGrid
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>% tbl_df
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>% tbl_df
##########
### Step 1: add ID & get only the trx in the period
##########
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
##########
### Step 2: find Zone frequently visited
##########
# transform Entr-Sor to Zone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
trxZoneActive
str(trxZoneActive)
str(GridLimit)
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
### Step 1: add ID & get only the trx in the period
##########
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
##########
### Step 2: find Zone frequently visited
##########
# transform Entr-Sor to Zone
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
t <- inner_join(trxZoneActive, GridLimit)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
input
min(input$Date)
str(input)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
min(trx$Date)
max(trx$Date)
trx
count(trx,ID)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
trx
trx %>% count(ID)
trxZone <- trx %>% inner_join(ODtoGrid)
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
# Compare to get One_Zone
#   C_NW & C_SW
#   C_NE & C_SE
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
temp
count(temp,OneZone)
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
# get all grids for these ID
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
t
t <- inner_join(t,trxZone)
t <- t %>% select(-Zone) %>% ungroup %>% distinct
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
trxZoneActiveH
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
result
trxZoneActiveH
filename.Input
read.table(filename.Input, sep=".")$V1
read.table(text = filename.Input, sep=".")$V1
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character()
rm(list=ls())
library(dplyr)
# get Parameter from Parameter/Param_Algo2
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
rm(args)
# input
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
ODtoGrid <- read.table("Reference/Ref_ODtoGrid.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
# get GridLimit
GridLimit <- read.table("Reference/Ref_GridLimit.csv", header = T, sep = ";") %>%
tbl_df %>%
mutate(Zone = as.character(Zone))
##########
### Step 1: add ID & get only the trx in the period
##########
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0)) %>%
filter(Date >= day.start,
Date <= day.end)
trxZone <- trx %>% inner_join(ODtoGrid)
# find number of active day for each ID
t1 <- trxZone %>%
group_by(ID) %>%
summarise(ActiveDay = n_distinct(Date))
# find number of active day for each ID,Zone
t2 <- trxZone %>%
group_by(ID, Zone) %>%
summarise(Day = n_distinct(Date))
# get ID,Zone with (Zone frequently visited)
#   - ActiveDay >= limit.ActiveDay
#   - Per >= limit.ZonePer
trxZoneActive <- inner_join(t1,t2) %>%
mutate(Per = Day / ActiveDay) %>%
filter(ActiveDay >= limit.ActiveDay,
Per >= limit.ZonePer)
rm(t1,t2)
##########
### Step 3: find ID with only one big zone
##########
# get Grid detailed info for trxZoneActive
t <- inner_join(trxZoneActive, GridLimit)
# group them by ID
t <- t %>% group_by(ID)
# Get 4 points
#   NW  NE (NorthWest, NorthEast)
#   SW  SE (SouthWest, SouthEast)
t1 <- t %>% arrange(Row, Col)             %>% select(Row, Col) %>% slice(1) %>% rename(R_NW = Row, C_NW = Col)
t2 <- t %>% arrange(Row, desc(Col))       %>% select(Row, Col) %>% slice(1) %>% rename(R_NE = Row, C_NE = Col)
t3 <- t %>% arrange(desc(Row), Col)       %>% select(Row, Col) %>% slice(1) %>% rename(R_SW = Row, C_SW = Col)
t4 <- t %>% arrange(desc(Row), desc(Col)) %>% select(Row, Col) %>% slice(1) %>% rename(R_SE = Row, C_SE = Col)
temp <- inner_join(t1, t2) %>% inner_join(t3) %>% inner_join(t4)
rm(t1,t2,t3,t4)
temp <- temp %>% mutate(Left = (C_NW == C_SW),
Right = (C_NE == C_SE),
OneZone = Left && Right)
##########
### Step 4: get Hourheatmap for OneZone
##########
# get ID with only one zone
t <- temp %>%
filter(OneZone == TRUE) %>%
select(ID)
t <- inner_join(t,trxZoneActive) %>% select(ID,Zone) %>% ungroup %>% distinct
# Get all trx passing these grids for these ID
t <- inner_join(t,trxZone)
# transform back from Zone to Entr_Sor
t <- t %>% select(-Zone) %>% ungroup %>% distinct
# get time window
trxZoneActiveH <- t %>%
mutate(H = round(TimeSor, digits = 0),
H_2 = H - H %% 2
)
result <- trxZoneActiveH %>%
group_by(ID,DOW,H) %>%
summarise(freq = n())
# %>%
#   filter(freq >= limit.WindowFreq)
rm(temp,ODtoGrid,GridLimit)
##########
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result, paste0("Output/Output_from_",inputName,"_V",time,".csv"),sep=";",row.name=FALSE,quote=FALSE)
rm(inputName,time)
write.table(trxZoneActive, paste0("Output/",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
inputName <-  read.table(text = filename.Input, sep=".")$V1 %>% as.character
time <- Sys.time() %>% format(format = "%Y%m%d_%H%M")
write.table(result, paste0("Output/",inputName,"_V",time,"_Window.csv"),sep=";",row.name=FALSE,quote=FALSE)
write.table(trxZoneActive, paste0("Output/",inputName,"_V",time,"_Zone.csv"),sep=";",row.name=FALSE,quote=FALSE)
source('~/GitHub/SA_Algo2_ZoneWindow/Algo2_mainWithoutArgs.R')
rm(list=ls())
args <- read.table("Parameters/Param_Algo2.csv",sep = ";", header=TRUE)
filename.Input <- as.character(args[1,1])
limit.ZonePer <- args[1,2]
limit.ActiveDay <- args[1,3]
# limit.WindowFreq <- 5
day.start <- as.Date(as.character(args[1,4]))
day.end <- as.Date(as.character(args[1,5]))
class(day.end)
class(day.start)
input <- read.table(paste0("Input/",filename.Input), header = T, sep = ";") %>% tbl_df
str(input)
trx <- input %>%
mutate(
ID = as.character(Badge * 100000 + Porteur),
Date = as.Date(as.character(Date)),
Sens = ifelse(Entr == 0,
ifelse(Voie <=20, 1,2),
0))
str(trx)
rm(list=ls())
